//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.TFJvmGcType = {
  'UNKNOWN' : 0,
  'SERIAL' : 1,
  'PARALLEL' : 2,
  'CMS' : 3,
  'G1' : 4
};
var TFServiceInfo = module.exports.TFServiceInfo = function(args) {
  this.serviceName = null;
  this.serviceLibs = null;
  if (args) {
    if (args.serviceName !== undefined && args.serviceName !== null) {
      this.serviceName = args.serviceName;
    }
    if (args.serviceLibs !== undefined && args.serviceLibs !== null) {
      this.serviceLibs = Thrift.copyList(args.serviceLibs, [null]);
    }
  }
};
TFServiceInfo.prototype = {};
TFServiceInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.serviceName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.serviceLibs = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = input.readString();
          this.serviceLibs.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TFServiceInfo.prototype.write = function(output) {
  output.writeStructBegin('TFServiceInfo');
  if (this.serviceName !== null && this.serviceName !== undefined) {
    output.writeFieldBegin('serviceName', Thrift.Type.STRING, 1);
    output.writeString(this.serviceName);
    output.writeFieldEnd();
  }
  if (this.serviceLibs !== null && this.serviceLibs !== undefined) {
    output.writeFieldBegin('serviceLibs', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.serviceLibs.length);
    for (var iter4 in this.serviceLibs) {
      if (this.serviceLibs.hasOwnProperty(iter4)) {
        iter4 = this.serviceLibs[iter4];
        output.writeString(iter4);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TFServerMetaData = module.exports.TFServerMetaData = function(args) {
  this.serverInfo = null;
  this.vmArgs = null;
  this.serviceInfos = null;
  if (args) {
    if (args.serverInfo !== undefined && args.serverInfo !== null) {
      this.serverInfo = args.serverInfo;
    }
    if (args.vmArgs !== undefined && args.vmArgs !== null) {
      this.vmArgs = Thrift.copyList(args.vmArgs, [null]);
    }
    if (args.serviceInfos !== undefined && args.serviceInfos !== null) {
      this.serviceInfos = Thrift.copyList(args.serviceInfos, [ttypes.TFServiceInfo]);
    }
  }
};
TFServerMetaData.prototype = {};
TFServerMetaData.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.serverInfo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.vmArgs = [];
        var _rtmp36 = input.readListBegin();
        var _size5 = _rtmp36.size || 0;
        for (var _i7 = 0; _i7 < _size5; ++_i7) {
          var elem8 = null;
          elem8 = input.readString();
          this.vmArgs.push(elem8);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        this.serviceInfos = [];
        var _rtmp310 = input.readListBegin();
        var _size9 = _rtmp310.size || 0;
        for (var _i11 = 0; _i11 < _size9; ++_i11) {
          var elem12 = null;
          elem12 = new ttypes.TFServiceInfo();
          elem12.read(input);
          this.serviceInfos.push(elem12);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TFServerMetaData.prototype.write = function(output) {
  output.writeStructBegin('TFServerMetaData');
  if (this.serverInfo !== null && this.serverInfo !== undefined) {
    output.writeFieldBegin('serverInfo', Thrift.Type.STRING, 1);
    output.writeString(this.serverInfo);
    output.writeFieldEnd();
  }
  if (this.vmArgs !== null && this.vmArgs !== undefined) {
    output.writeFieldBegin('vmArgs', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.vmArgs.length);
    for (var iter13 in this.vmArgs) {
      if (this.vmArgs.hasOwnProperty(iter13)) {
        iter13 = this.vmArgs[iter13];
        output.writeString(iter13);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.serviceInfos !== null && this.serviceInfos !== undefined) {
    output.writeFieldBegin('serviceInfos', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRUCT, this.serviceInfos.length);
    for (var iter14 in this.serviceInfos) {
      if (this.serviceInfos.hasOwnProperty(iter14)) {
        iter14 = this.serviceInfos[iter14];
        iter14.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TFJvmInfo = module.exports.TFJvmInfo = function(args) {
  this.version = 0;
  this.vmVersion = null;
  this.gcType = 0;
  if (args) {
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.vmVersion !== undefined && args.vmVersion !== null) {
      this.vmVersion = args.vmVersion;
    }
    if (args.gcType !== undefined && args.gcType !== null) {
      this.gcType = args.gcType;
    }
  }
};
TFJvmInfo.prototype = {};
TFJvmInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.version = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.vmVersion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.gcType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TFJvmInfo.prototype.write = function(output) {
  output.writeStructBegin('TFJvmInfo');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I16, 1);
    output.writeI16(this.version);
    output.writeFieldEnd();
  }
  if (this.vmVersion !== null && this.vmVersion !== undefined) {
    output.writeFieldBegin('vmVersion', Thrift.Type.STRING, 2);
    output.writeString(this.vmVersion);
    output.writeFieldEnd();
  }
  if (this.gcType !== null && this.gcType !== undefined) {
    output.writeFieldBegin('gcType', Thrift.Type.I32, 3);
    output.writeI32(this.gcType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TFAgentInfo = module.exports.TFAgentInfo = function(args) {
  this.hostname = null;
  this.ip = null;
  this.ports = null;
  this.agentId = null;
  this.applicationName = null;
  this.serviceType = null;
  this.pid = null;
  this.agentVersion = null;
  this.vmVersion = null;
  this.startTimestamp = null;
  this.endTimestamp = null;
  this.endStatus = null;
  this.serverMetaData = null;
  this.jvmInfo = null;
  this.container = false;
  if (args) {
    if (args.hostname !== undefined && args.hostname !== null) {
      this.hostname = args.hostname;
    }
    if (args.ip !== undefined && args.ip !== null) {
      this.ip = args.ip;
    }
    if (args.ports !== undefined && args.ports !== null) {
      this.ports = args.ports;
    }
    if (args.agentId !== undefined && args.agentId !== null) {
      this.agentId = args.agentId;
    }
    if (args.applicationName !== undefined && args.applicationName !== null) {
      this.applicationName = args.applicationName;
    }
    if (args.serviceType !== undefined && args.serviceType !== null) {
      this.serviceType = args.serviceType;
    }
    if (args.pid !== undefined && args.pid !== null) {
      this.pid = args.pid;
    }
    if (args.agentVersion !== undefined && args.agentVersion !== null) {
      this.agentVersion = args.agentVersion;
    }
    if (args.vmVersion !== undefined && args.vmVersion !== null) {
      this.vmVersion = args.vmVersion;
    }
    if (args.startTimestamp !== undefined && args.startTimestamp !== null) {
      this.startTimestamp = args.startTimestamp;
    }
    if (args.endTimestamp !== undefined && args.endTimestamp !== null) {
      this.endTimestamp = args.endTimestamp;
    }
    if (args.endStatus !== undefined && args.endStatus !== null) {
      this.endStatus = args.endStatus;
    }
    if (args.serverMetaData !== undefined && args.serverMetaData !== null) {
      this.serverMetaData = new ttypes.TFServerMetaData(args.serverMetaData);
    }
    if (args.jvmInfo !== undefined && args.jvmInfo !== null) {
      this.jvmInfo = new ttypes.TFJvmInfo(args.jvmInfo);
    }
    if (args.container !== undefined && args.container !== null) {
      this.container = args.container;
    }
  }
};
TFAgentInfo.prototype = {};
TFAgentInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.hostname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ip = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.ports = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.agentId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.applicationName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I16) {
        this.serviceType = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.pid = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.agentVersion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.vmVersion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.startTimestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.endTimestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.endStatus = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRUCT) {
        this.serverMetaData = new ttypes.TFServerMetaData();
        this.serverMetaData.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRUCT) {
        this.jvmInfo = new ttypes.TFJvmInfo();
        this.jvmInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.BOOL) {
        this.container = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TFAgentInfo.prototype.write = function(output) {
  output.writeStructBegin('TFAgentInfo');
  if (this.hostname !== null && this.hostname !== undefined) {
    output.writeFieldBegin('hostname', Thrift.Type.STRING, 1);
    output.writeString(this.hostname);
    output.writeFieldEnd();
  }
  if (this.ip !== null && this.ip !== undefined) {
    output.writeFieldBegin('ip', Thrift.Type.STRING, 2);
    output.writeString(this.ip);
    output.writeFieldEnd();
  }
  if (this.ports !== null && this.ports !== undefined) {
    output.writeFieldBegin('ports', Thrift.Type.STRING, 3);
    output.writeString(this.ports);
    output.writeFieldEnd();
  }
  if (this.agentId !== null && this.agentId !== undefined) {
    output.writeFieldBegin('agentId', Thrift.Type.STRING, 4);
    output.writeString(this.agentId);
    output.writeFieldEnd();
  }
  if (this.applicationName !== null && this.applicationName !== undefined) {
    output.writeFieldBegin('applicationName', Thrift.Type.STRING, 5);
    output.writeString(this.applicationName);
    output.writeFieldEnd();
  }
  if (this.serviceType !== null && this.serviceType !== undefined) {
    output.writeFieldBegin('serviceType', Thrift.Type.I16, 6);
    output.writeI16(this.serviceType);
    output.writeFieldEnd();
  }
  if (this.pid !== null && this.pid !== undefined) {
    output.writeFieldBegin('pid', Thrift.Type.I32, 7);
    output.writeI32(this.pid);
    output.writeFieldEnd();
  }
  if (this.agentVersion !== null && this.agentVersion !== undefined) {
    output.writeFieldBegin('agentVersion', Thrift.Type.STRING, 8);
    output.writeString(this.agentVersion);
    output.writeFieldEnd();
  }
  if (this.vmVersion !== null && this.vmVersion !== undefined) {
    output.writeFieldBegin('vmVersion', Thrift.Type.STRING, 9);
    output.writeString(this.vmVersion);
    output.writeFieldEnd();
  }
  if (this.startTimestamp !== null && this.startTimestamp !== undefined) {
    output.writeFieldBegin('startTimestamp', Thrift.Type.I64, 10);
    output.writeI64(this.startTimestamp);
    output.writeFieldEnd();
  }
  if (this.endTimestamp !== null && this.endTimestamp !== undefined) {
    output.writeFieldBegin('endTimestamp', Thrift.Type.I64, 11);
    output.writeI64(this.endTimestamp);
    output.writeFieldEnd();
  }
  if (this.endStatus !== null && this.endStatus !== undefined) {
    output.writeFieldBegin('endStatus', Thrift.Type.I32, 12);
    output.writeI32(this.endStatus);
    output.writeFieldEnd();
  }
  if (this.serverMetaData !== null && this.serverMetaData !== undefined) {
    output.writeFieldBegin('serverMetaData', Thrift.Type.STRUCT, 20);
    this.serverMetaData.write(output);
    output.writeFieldEnd();
  }
  if (this.jvmInfo !== null && this.jvmInfo !== undefined) {
    output.writeFieldBegin('jvmInfo', Thrift.Type.STRUCT, 30);
    this.jvmInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.container !== null && this.container !== undefined) {
    output.writeFieldBegin('container', Thrift.Type.BOOL, 40);
    output.writeBool(this.container);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TFJvmGc = module.exports.TFJvmGc = function(args) {
  this.type = 0;
  this.jvmMemoryHeapUsed = null;
  this.jvmMemoryHeapMax = null;
  this.jvmMemoryNonHeapUsed = null;
  this.jvmMemoryNonHeapMax = null;
  this.jvmGcOldCount = null;
  this.jvmGcOldTime = null;
  this.jvmGcDetailed = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.jvmMemoryHeapUsed !== undefined && args.jvmMemoryHeapUsed !== null) {
      this.jvmMemoryHeapUsed = args.jvmMemoryHeapUsed;
    }
    if (args.jvmMemoryHeapMax !== undefined && args.jvmMemoryHeapMax !== null) {
      this.jvmMemoryHeapMax = args.jvmMemoryHeapMax;
    }
    if (args.jvmMemoryNonHeapUsed !== undefined && args.jvmMemoryNonHeapUsed !== null) {
      this.jvmMemoryNonHeapUsed = args.jvmMemoryNonHeapUsed;
    }
    if (args.jvmMemoryNonHeapMax !== undefined && args.jvmMemoryNonHeapMax !== null) {
      this.jvmMemoryNonHeapMax = args.jvmMemoryNonHeapMax;
    }
    if (args.jvmGcOldCount !== undefined && args.jvmGcOldCount !== null) {
      this.jvmGcOldCount = args.jvmGcOldCount;
    }
    if (args.jvmGcOldTime !== undefined && args.jvmGcOldTime !== null) {
      this.jvmGcOldTime = args.jvmGcOldTime;
    }
    if (args.jvmGcDetailed !== undefined && args.jvmGcDetailed !== null) {
      this.jvmGcDetailed = new ttypes.TFJvmGcDetailed(args.jvmGcDetailed);
    }
  }
};
TFJvmGc.prototype = {};
TFJvmGc.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.jvmMemoryHeapUsed = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.jvmMemoryHeapMax = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.jvmMemoryNonHeapUsed = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.jvmMemoryNonHeapMax = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.jvmGcOldCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.jvmGcOldTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.jvmGcDetailed = new ttypes.TFJvmGcDetailed();
        this.jvmGcDetailed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TFJvmGc.prototype.write = function(output) {
  output.writeStructBegin('TFJvmGc');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.jvmMemoryHeapUsed !== null && this.jvmMemoryHeapUsed !== undefined) {
    output.writeFieldBegin('jvmMemoryHeapUsed', Thrift.Type.I64, 2);
    output.writeI64(this.jvmMemoryHeapUsed);
    output.writeFieldEnd();
  }
  if (this.jvmMemoryHeapMax !== null && this.jvmMemoryHeapMax !== undefined) {
    output.writeFieldBegin('jvmMemoryHeapMax', Thrift.Type.I64, 3);
    output.writeI64(this.jvmMemoryHeapMax);
    output.writeFieldEnd();
  }
  if (this.jvmMemoryNonHeapUsed !== null && this.jvmMemoryNonHeapUsed !== undefined) {
    output.writeFieldBegin('jvmMemoryNonHeapUsed', Thrift.Type.I64, 4);
    output.writeI64(this.jvmMemoryNonHeapUsed);
    output.writeFieldEnd();
  }
  if (this.jvmMemoryNonHeapMax !== null && this.jvmMemoryNonHeapMax !== undefined) {
    output.writeFieldBegin('jvmMemoryNonHeapMax', Thrift.Type.I64, 5);
    output.writeI64(this.jvmMemoryNonHeapMax);
    output.writeFieldEnd();
  }
  if (this.jvmGcOldCount !== null && this.jvmGcOldCount !== undefined) {
    output.writeFieldBegin('jvmGcOldCount', Thrift.Type.I64, 6);
    output.writeI64(this.jvmGcOldCount);
    output.writeFieldEnd();
  }
  if (this.jvmGcOldTime !== null && this.jvmGcOldTime !== undefined) {
    output.writeFieldBegin('jvmGcOldTime', Thrift.Type.I64, 7);
    output.writeI64(this.jvmGcOldTime);
    output.writeFieldEnd();
  }
  if (this.jvmGcDetailed !== null && this.jvmGcDetailed !== undefined) {
    output.writeFieldBegin('jvmGcDetailed', Thrift.Type.STRUCT, 8);
    this.jvmGcDetailed.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TFDirectBuffer = module.exports.TFDirectBuffer = function(args) {
  this.directCount = null;
  this.directMemoryUsed = null;
  this.mappedCount = null;
  this.mappedMemoryUsed = null;
  if (args) {
    if (args.directCount !== undefined && args.directCount !== null) {
      this.directCount = args.directCount;
    }
    if (args.directMemoryUsed !== undefined && args.directMemoryUsed !== null) {
      this.directMemoryUsed = args.directMemoryUsed;
    }
    if (args.mappedCount !== undefined && args.mappedCount !== null) {
      this.mappedCount = args.mappedCount;
    }
    if (args.mappedMemoryUsed !== undefined && args.mappedMemoryUsed !== null) {
      this.mappedMemoryUsed = args.mappedMemoryUsed;
    }
  }
};
TFDirectBuffer.prototype = {};
TFDirectBuffer.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.directCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.directMemoryUsed = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.mappedCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.mappedMemoryUsed = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TFDirectBuffer.prototype.write = function(output) {
  output.writeStructBegin('TFDirectBuffer');
  if (this.directCount !== null && this.directCount !== undefined) {
    output.writeFieldBegin('directCount', Thrift.Type.I64, 1);
    output.writeI64(this.directCount);
    output.writeFieldEnd();
  }
  if (this.directMemoryUsed !== null && this.directMemoryUsed !== undefined) {
    output.writeFieldBegin('directMemoryUsed', Thrift.Type.I64, 2);
    output.writeI64(this.directMemoryUsed);
    output.writeFieldEnd();
  }
  if (this.mappedCount !== null && this.mappedCount !== undefined) {
    output.writeFieldBegin('mappedCount', Thrift.Type.I64, 3);
    output.writeI64(this.mappedCount);
    output.writeFieldEnd();
  }
  if (this.mappedMemoryUsed !== null && this.mappedMemoryUsed !== undefined) {
    output.writeFieldBegin('mappedMemoryUsed', Thrift.Type.I64, 4);
    output.writeI64(this.mappedMemoryUsed);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TFJvmGcDetailed = module.exports.TFJvmGcDetailed = function(args) {
  this.jvmGcNewCount = null;
  this.jvmGcNewTime = null;
  this.jvmPoolCodeCacheUsed = null;
  this.jvmPoolNewGenUsed = null;
  this.jvmPoolOldGenUsed = null;
  this.jvmPoolSurvivorSpaceUsed = null;
  this.jvmPoolPermGenUsed = null;
  this.jvmPoolMetaspaceUsed = null;
  if (args) {
    if (args.jvmGcNewCount !== undefined && args.jvmGcNewCount !== null) {
      this.jvmGcNewCount = args.jvmGcNewCount;
    }
    if (args.jvmGcNewTime !== undefined && args.jvmGcNewTime !== null) {
      this.jvmGcNewTime = args.jvmGcNewTime;
    }
    if (args.jvmPoolCodeCacheUsed !== undefined && args.jvmPoolCodeCacheUsed !== null) {
      this.jvmPoolCodeCacheUsed = args.jvmPoolCodeCacheUsed;
    }
    if (args.jvmPoolNewGenUsed !== undefined && args.jvmPoolNewGenUsed !== null) {
      this.jvmPoolNewGenUsed = args.jvmPoolNewGenUsed;
    }
    if (args.jvmPoolOldGenUsed !== undefined && args.jvmPoolOldGenUsed !== null) {
      this.jvmPoolOldGenUsed = args.jvmPoolOldGenUsed;
    }
    if (args.jvmPoolSurvivorSpaceUsed !== undefined && args.jvmPoolSurvivorSpaceUsed !== null) {
      this.jvmPoolSurvivorSpaceUsed = args.jvmPoolSurvivorSpaceUsed;
    }
    if (args.jvmPoolPermGenUsed !== undefined && args.jvmPoolPermGenUsed !== null) {
      this.jvmPoolPermGenUsed = args.jvmPoolPermGenUsed;
    }
    if (args.jvmPoolMetaspaceUsed !== undefined && args.jvmPoolMetaspaceUsed !== null) {
      this.jvmPoolMetaspaceUsed = args.jvmPoolMetaspaceUsed;
    }
  }
};
TFJvmGcDetailed.prototype = {};
TFJvmGcDetailed.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.jvmGcNewCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.jvmGcNewTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.jvmPoolCodeCacheUsed = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.jvmPoolNewGenUsed = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.jvmPoolOldGenUsed = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.jvmPoolSurvivorSpaceUsed = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.DOUBLE) {
        this.jvmPoolPermGenUsed = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.DOUBLE) {
        this.jvmPoolMetaspaceUsed = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TFJvmGcDetailed.prototype.write = function(output) {
  output.writeStructBegin('TFJvmGcDetailed');
  if (this.jvmGcNewCount !== null && this.jvmGcNewCount !== undefined) {
    output.writeFieldBegin('jvmGcNewCount', Thrift.Type.I64, 1);
    output.writeI64(this.jvmGcNewCount);
    output.writeFieldEnd();
  }
  if (this.jvmGcNewTime !== null && this.jvmGcNewTime !== undefined) {
    output.writeFieldBegin('jvmGcNewTime', Thrift.Type.I64, 2);
    output.writeI64(this.jvmGcNewTime);
    output.writeFieldEnd();
  }
  if (this.jvmPoolCodeCacheUsed !== null && this.jvmPoolCodeCacheUsed !== undefined) {
    output.writeFieldBegin('jvmPoolCodeCacheUsed', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.jvmPoolCodeCacheUsed);
    output.writeFieldEnd();
  }
  if (this.jvmPoolNewGenUsed !== null && this.jvmPoolNewGenUsed !== undefined) {
    output.writeFieldBegin('jvmPoolNewGenUsed', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.jvmPoolNewGenUsed);
    output.writeFieldEnd();
  }
  if (this.jvmPoolOldGenUsed !== null && this.jvmPoolOldGenUsed !== undefined) {
    output.writeFieldBegin('jvmPoolOldGenUsed', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.jvmPoolOldGenUsed);
    output.writeFieldEnd();
  }
  if (this.jvmPoolSurvivorSpaceUsed !== null && this.jvmPoolSurvivorSpaceUsed !== undefined) {
    output.writeFieldBegin('jvmPoolSurvivorSpaceUsed', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.jvmPoolSurvivorSpaceUsed);
    output.writeFieldEnd();
  }
  if (this.jvmPoolPermGenUsed !== null && this.jvmPoolPermGenUsed !== undefined) {
    output.writeFieldBegin('jvmPoolPermGenUsed', Thrift.Type.DOUBLE, 7);
    output.writeDouble(this.jvmPoolPermGenUsed);
    output.writeFieldEnd();
  }
  if (this.jvmPoolMetaspaceUsed !== null && this.jvmPoolMetaspaceUsed !== undefined) {
    output.writeFieldBegin('jvmPoolMetaspaceUsed', Thrift.Type.DOUBLE, 8);
    output.writeDouble(this.jvmPoolMetaspaceUsed);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TFCpuLoad = module.exports.TFCpuLoad = function(args) {
  this.jvmCpuLoad = null;
  this.systemCpuLoad = null;
  if (args) {
    if (args.jvmCpuLoad !== undefined && args.jvmCpuLoad !== null) {
      this.jvmCpuLoad = args.jvmCpuLoad;
    }
    if (args.systemCpuLoad !== undefined && args.systemCpuLoad !== null) {
      this.systemCpuLoad = args.systemCpuLoad;
    }
  }
};
TFCpuLoad.prototype = {};
TFCpuLoad.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.jvmCpuLoad = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.systemCpuLoad = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TFCpuLoad.prototype.write = function(output) {
  output.writeStructBegin('TFCpuLoad');
  if (this.jvmCpuLoad !== null && this.jvmCpuLoad !== undefined) {
    output.writeFieldBegin('jvmCpuLoad', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.jvmCpuLoad);
    output.writeFieldEnd();
  }
  if (this.systemCpuLoad !== null && this.systemCpuLoad !== undefined) {
    output.writeFieldBegin('systemCpuLoad', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.systemCpuLoad);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TFTransaction = module.exports.TFTransaction = function(args) {
  this.sampledNewCount = null;
  this.sampledContinuationCount = null;
  this.unsampledNewCount = null;
  this.unsampledContinuationCount = null;
  if (args) {
    if (args.sampledNewCount !== undefined && args.sampledNewCount !== null) {
      this.sampledNewCount = args.sampledNewCount;
    }
    if (args.sampledContinuationCount !== undefined && args.sampledContinuationCount !== null) {
      this.sampledContinuationCount = args.sampledContinuationCount;
    }
    if (args.unsampledNewCount !== undefined && args.unsampledNewCount !== null) {
      this.unsampledNewCount = args.unsampledNewCount;
    }
    if (args.unsampledContinuationCount !== undefined && args.unsampledContinuationCount !== null) {
      this.unsampledContinuationCount = args.unsampledContinuationCount;
    }
  }
};
TFTransaction.prototype = {};
TFTransaction.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.sampledNewCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.sampledContinuationCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.unsampledNewCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.unsampledContinuationCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TFTransaction.prototype.write = function(output) {
  output.writeStructBegin('TFTransaction');
  if (this.sampledNewCount !== null && this.sampledNewCount !== undefined) {
    output.writeFieldBegin('sampledNewCount', Thrift.Type.I64, 2);
    output.writeI64(this.sampledNewCount);
    output.writeFieldEnd();
  }
  if (this.sampledContinuationCount !== null && this.sampledContinuationCount !== undefined) {
    output.writeFieldBegin('sampledContinuationCount', Thrift.Type.I64, 3);
    output.writeI64(this.sampledContinuationCount);
    output.writeFieldEnd();
  }
  if (this.unsampledNewCount !== null && this.unsampledNewCount !== undefined) {
    output.writeFieldBegin('unsampledNewCount', Thrift.Type.I64, 4);
    output.writeI64(this.unsampledNewCount);
    output.writeFieldEnd();
  }
  if (this.unsampledContinuationCount !== null && this.unsampledContinuationCount !== undefined) {
    output.writeFieldBegin('unsampledContinuationCount', Thrift.Type.I64, 5);
    output.writeI64(this.unsampledContinuationCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TFActiveTraceHistogram = module.exports.TFActiveTraceHistogram = function(args) {
  this.version = 0;
  this.histogramSchemaType = null;
  this.activeTraceCount = null;
  if (args) {
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.histogramSchemaType !== undefined && args.histogramSchemaType !== null) {
      this.histogramSchemaType = args.histogramSchemaType;
    }
    if (args.activeTraceCount !== undefined && args.activeTraceCount !== null) {
      this.activeTraceCount = Thrift.copyList(args.activeTraceCount, [null]);
    }
  }
};
TFActiveTraceHistogram.prototype = {};
TFActiveTraceHistogram.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.version = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.histogramSchemaType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.activeTraceCount = [];
        var _rtmp316 = input.readListBegin();
        var _size15 = _rtmp316.size || 0;
        for (var _i17 = 0; _i17 < _size15; ++_i17) {
          var elem18 = null;
          elem18 = input.readI32();
          this.activeTraceCount.push(elem18);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TFActiveTraceHistogram.prototype.write = function(output) {
  output.writeStructBegin('TFActiveTraceHistogram');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I16, 1);
    output.writeI16(this.version);
    output.writeFieldEnd();
  }
  if (this.histogramSchemaType !== null && this.histogramSchemaType !== undefined) {
    output.writeFieldBegin('histogramSchemaType', Thrift.Type.I32, 2);
    output.writeI32(this.histogramSchemaType);
    output.writeFieldEnd();
  }
  if (this.activeTraceCount !== null && this.activeTraceCount !== undefined) {
    output.writeFieldBegin('activeTraceCount', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I32, this.activeTraceCount.length);
    for (var iter19 in this.activeTraceCount) {
      if (this.activeTraceCount.hasOwnProperty(iter19)) {
        iter19 = this.activeTraceCount[iter19];
        output.writeI32(iter19);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TFActiveTrace = module.exports.TFActiveTrace = function(args) {
  this.histogram = null;
  if (args) {
    if (args.histogram !== undefined && args.histogram !== null) {
      this.histogram = new ttypes.TFActiveTraceHistogram(args.histogram);
    }
  }
};
TFActiveTrace.prototype = {};
TFActiveTrace.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.histogram = new ttypes.TFActiveTraceHistogram();
        this.histogram.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TFActiveTrace.prototype.write = function(output) {
  output.writeStructBegin('TFActiveTrace');
  if (this.histogram !== null && this.histogram !== undefined) {
    output.writeFieldBegin('histogram', Thrift.Type.STRUCT, 1);
    this.histogram.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TFResponseTime = module.exports.TFResponseTime = function(args) {
  this.avg = 0;
  if (args) {
    if (args.avg !== undefined && args.avg !== null) {
      this.avg = args.avg;
    }
  }
};
TFResponseTime.prototype = {};
TFResponseTime.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.avg = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TFResponseTime.prototype.write = function(output) {
  output.writeStructBegin('TFResponseTime');
  if (this.avg !== null && this.avg !== undefined) {
    output.writeFieldBegin('avg', Thrift.Type.I64, 1);
    output.writeI64(this.avg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TFAgentStat = module.exports.TFAgentStat = function(args) {
  this.agentId = null;
  this.startTimestamp = null;
  this.timestamp = null;
  this.collectInterval = null;
  this.gc = null;
  this.cpuLoad = null;
  this.transaction = null;
  this.activeTrace = null;
  this.dataSourceList = null;
  this.responseTime = null;
  this.fileDescriptor = null;
  this.directBuffer = null;
  this.metadata = null;
  if (args) {
    if (args.agentId !== undefined && args.agentId !== null) {
      this.agentId = args.agentId;
    }
    if (args.startTimestamp !== undefined && args.startTimestamp !== null) {
      this.startTimestamp = args.startTimestamp;
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.collectInterval !== undefined && args.collectInterval !== null) {
      this.collectInterval = args.collectInterval;
    }
    if (args.gc !== undefined && args.gc !== null) {
      this.gc = new ttypes.TFJvmGc(args.gc);
    }
    if (args.cpuLoad !== undefined && args.cpuLoad !== null) {
      this.cpuLoad = new ttypes.TFCpuLoad(args.cpuLoad);
    }
    if (args.transaction !== undefined && args.transaction !== null) {
      this.transaction = new ttypes.TFTransaction(args.transaction);
    }
    if (args.activeTrace !== undefined && args.activeTrace !== null) {
      this.activeTrace = new ttypes.TFActiveTrace(args.activeTrace);
    }
    if (args.dataSourceList !== undefined && args.dataSourceList !== null) {
      this.dataSourceList = new ttypes.TFDataSourceList(args.dataSourceList);
    }
    if (args.responseTime !== undefined && args.responseTime !== null) {
      this.responseTime = new ttypes.TFResponseTime(args.responseTime);
    }
    if (args.fileDescriptor !== undefined && args.fileDescriptor !== null) {
      this.fileDescriptor = new ttypes.TFFileDescriptor(args.fileDescriptor);
    }
    if (args.directBuffer !== undefined && args.directBuffer !== null) {
      this.directBuffer = new ttypes.TFDirectBuffer(args.directBuffer);
    }
    if (args.metadata !== undefined && args.metadata !== null) {
      this.metadata = args.metadata;
    }
  }
};
TFAgentStat.prototype = {};
TFAgentStat.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.agentId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.startTimestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.collectInterval = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.gc = new ttypes.TFJvmGc();
        this.gc.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRUCT) {
        this.cpuLoad = new ttypes.TFCpuLoad();
        this.cpuLoad.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRUCT) {
        this.transaction = new ttypes.TFTransaction();
        this.transaction.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.STRUCT) {
        this.activeTrace = new ttypes.TFActiveTrace();
        this.activeTrace.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 50:
      if (ftype == Thrift.Type.STRUCT) {
        this.dataSourceList = new ttypes.TFDataSourceList();
        this.dataSourceList.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 60:
      if (ftype == Thrift.Type.STRUCT) {
        this.responseTime = new ttypes.TFResponseTime();
        this.responseTime.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 80:
      if (ftype == Thrift.Type.STRUCT) {
        this.fileDescriptor = new ttypes.TFFileDescriptor();
        this.fileDescriptor.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 90:
      if (ftype == Thrift.Type.STRUCT) {
        this.directBuffer = new ttypes.TFDirectBuffer();
        this.directBuffer.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 200:
      if (ftype == Thrift.Type.STRING) {
        this.metadata = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TFAgentStat.prototype.write = function(output) {
  output.writeStructBegin('TFAgentStat');
  if (this.agentId !== null && this.agentId !== undefined) {
    output.writeFieldBegin('agentId', Thrift.Type.STRING, 1);
    output.writeString(this.agentId);
    output.writeFieldEnd();
  }
  if (this.startTimestamp !== null && this.startTimestamp !== undefined) {
    output.writeFieldBegin('startTimestamp', Thrift.Type.I64, 2);
    output.writeI64(this.startTimestamp);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.collectInterval !== null && this.collectInterval !== undefined) {
    output.writeFieldBegin('collectInterval', Thrift.Type.I64, 4);
    output.writeI64(this.collectInterval);
    output.writeFieldEnd();
  }
  if (this.gc !== null && this.gc !== undefined) {
    output.writeFieldBegin('gc', Thrift.Type.STRUCT, 10);
    this.gc.write(output);
    output.writeFieldEnd();
  }
  if (this.cpuLoad !== null && this.cpuLoad !== undefined) {
    output.writeFieldBegin('cpuLoad', Thrift.Type.STRUCT, 20);
    this.cpuLoad.write(output);
    output.writeFieldEnd();
  }
  if (this.transaction !== null && this.transaction !== undefined) {
    output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 30);
    this.transaction.write(output);
    output.writeFieldEnd();
  }
  if (this.activeTrace !== null && this.activeTrace !== undefined) {
    output.writeFieldBegin('activeTrace', Thrift.Type.STRUCT, 40);
    this.activeTrace.write(output);
    output.writeFieldEnd();
  }
  if (this.dataSourceList !== null && this.dataSourceList !== undefined) {
    output.writeFieldBegin('dataSourceList', Thrift.Type.STRUCT, 50);
    this.dataSourceList.write(output);
    output.writeFieldEnd();
  }
  if (this.responseTime !== null && this.responseTime !== undefined) {
    output.writeFieldBegin('responseTime', Thrift.Type.STRUCT, 60);
    this.responseTime.write(output);
    output.writeFieldEnd();
  }
  if (this.fileDescriptor !== null && this.fileDescriptor !== undefined) {
    output.writeFieldBegin('fileDescriptor', Thrift.Type.STRUCT, 80);
    this.fileDescriptor.write(output);
    output.writeFieldEnd();
  }
  if (this.directBuffer !== null && this.directBuffer !== undefined) {
    output.writeFieldBegin('directBuffer', Thrift.Type.STRUCT, 90);
    this.directBuffer.write(output);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRING, 200);
    output.writeString(this.metadata);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TFAgentStatBatch = module.exports.TFAgentStatBatch = function(args) {
  this.agentId = null;
  this.startTimestamp = null;
  this.agentStats = null;
  if (args) {
    if (args.agentId !== undefined && args.agentId !== null) {
      this.agentId = args.agentId;
    }
    if (args.startTimestamp !== undefined && args.startTimestamp !== null) {
      this.startTimestamp = args.startTimestamp;
    }
    if (args.agentStats !== undefined && args.agentStats !== null) {
      this.agentStats = Thrift.copyList(args.agentStats, [ttypes.TFAgentStat]);
    }
  }
};
TFAgentStatBatch.prototype = {};
TFAgentStatBatch.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.agentId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.startTimestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        this.agentStats = [];
        var _rtmp321 = input.readListBegin();
        var _size20 = _rtmp321.size || 0;
        for (var _i22 = 0; _i22 < _size20; ++_i22) {
          var elem23 = null;
          elem23 = new ttypes.TFAgentStat();
          elem23.read(input);
          this.agentStats.push(elem23);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TFAgentStatBatch.prototype.write = function(output) {
  output.writeStructBegin('TFAgentStatBatch');
  if (this.agentId !== null && this.agentId !== undefined) {
    output.writeFieldBegin('agentId', Thrift.Type.STRING, 1);
    output.writeString(this.agentId);
    output.writeFieldEnd();
  }
  if (this.startTimestamp !== null && this.startTimestamp !== undefined) {
    output.writeFieldBegin('startTimestamp', Thrift.Type.I64, 2);
    output.writeI64(this.startTimestamp);
    output.writeFieldEnd();
  }
  if (this.agentStats !== null && this.agentStats !== undefined) {
    output.writeFieldBegin('agentStats', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRUCT, this.agentStats.length);
    for (var iter24 in this.agentStats) {
      if (this.agentStats.hasOwnProperty(iter24)) {
        iter24 = this.agentStats[iter24];
        iter24.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TFDataSource = module.exports.TFDataSource = function(args) {
  this.id = null;
  this.serviceTypeCode = null;
  this.databaseName = null;
  this.url = null;
  this.activeConnectionSize = 0;
  this.maxConnectionSize = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.serviceTypeCode !== undefined && args.serviceTypeCode !== null) {
      this.serviceTypeCode = args.serviceTypeCode;
    }
    if (args.databaseName !== undefined && args.databaseName !== null) {
      this.databaseName = args.databaseName;
    }
    if (args.url !== undefined && args.url !== null) {
      this.url = args.url;
    }
    if (args.activeConnectionSize !== undefined && args.activeConnectionSize !== null) {
      this.activeConnectionSize = args.activeConnectionSize;
    }
    if (args.maxConnectionSize !== undefined && args.maxConnectionSize !== null) {
      this.maxConnectionSize = args.maxConnectionSize;
    }
  }
};
TFDataSource.prototype = {};
TFDataSource.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.serviceTypeCode = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.databaseName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.activeConnectionSize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.maxConnectionSize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TFDataSource.prototype.write = function(output) {
  output.writeStructBegin('TFDataSource');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.serviceTypeCode !== null && this.serviceTypeCode !== undefined) {
    output.writeFieldBegin('serviceTypeCode', Thrift.Type.I16, 2);
    output.writeI16(this.serviceTypeCode);
    output.writeFieldEnd();
  }
  if (this.databaseName !== null && this.databaseName !== undefined) {
    output.writeFieldBegin('databaseName', Thrift.Type.STRING, 3);
    output.writeString(this.databaseName);
    output.writeFieldEnd();
  }
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 4);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.activeConnectionSize !== null && this.activeConnectionSize !== undefined) {
    output.writeFieldBegin('activeConnectionSize', Thrift.Type.I32, 5);
    output.writeI32(this.activeConnectionSize);
    output.writeFieldEnd();
  }
  if (this.maxConnectionSize !== null && this.maxConnectionSize !== undefined) {
    output.writeFieldBegin('maxConnectionSize', Thrift.Type.I32, 6);
    output.writeI32(this.maxConnectionSize);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TFDataSourceList = module.exports.TFDataSourceList = function(args) {
  this.dataSourceList = null;
  if (args) {
    if (args.dataSourceList !== undefined && args.dataSourceList !== null) {
      this.dataSourceList = Thrift.copyList(args.dataSourceList, [ttypes.TFDataSource]);
    }
  }
};
TFDataSourceList.prototype = {};
TFDataSourceList.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.dataSourceList = [];
        var _rtmp326 = input.readListBegin();
        var _size25 = _rtmp326.size || 0;
        for (var _i27 = 0; _i27 < _size25; ++_i27) {
          var elem28 = null;
          elem28 = new ttypes.TFDataSource();
          elem28.read(input);
          this.dataSourceList.push(elem28);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TFDataSourceList.prototype.write = function(output) {
  output.writeStructBegin('TFDataSourceList');
  if (this.dataSourceList !== null && this.dataSourceList !== undefined) {
    output.writeFieldBegin('dataSourceList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.dataSourceList.length);
    for (var iter29 in this.dataSourceList) {
      if (this.dataSourceList.hasOwnProperty(iter29)) {
        iter29 = this.dataSourceList[iter29];
        iter29.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TFFileDescriptor = module.exports.TFFileDescriptor = function(args) {
  this.openFileDescriptorCount = null;
  if (args) {
    if (args.openFileDescriptorCount !== undefined && args.openFileDescriptorCount !== null) {
      this.openFileDescriptorCount = args.openFileDescriptorCount;
    }
  }
};
TFFileDescriptor.prototype = {};
TFFileDescriptor.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.openFileDescriptorCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TFFileDescriptor.prototype.write = function(output) {
  output.writeStructBegin('TFFileDescriptor');
  if (this.openFileDescriptorCount !== null && this.openFileDescriptorCount !== undefined) {
    output.writeFieldBegin('openFileDescriptorCount', Thrift.Type.I64, 1);
    output.writeI64(this.openFileDescriptorCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

