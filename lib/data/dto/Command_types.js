//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.TThreadDumpType = {
  'TARGET' : 0,
  'PENDING' : 1
};
ttypes.TThreadState = {
  'NEW' : 0,
  'RUNNABLE' : 1,
  'BLOCKED' : 2,
  'WAITING' : 3,
  'TIMED_WAITING' : 4,
  'TERMINATED' : 5,
  'UNKNOWN' : 6
};
ttypes.TRouteResult = {
  'OK' : 0,
  'BAD_REQUEST' : 200,
  'EMPTY_REQUEST' : 201,
  'NOT_SUPPORTED_REQUEST' : 202,
  'BAD_RESPONSE' : 210,
  'EMPTY_RESPONSE' : 211,
  'NOT_SUPPORTED_RESPONSE' : 212,
  'TIMEOUT' : 220,
  'NOT_FOUND' : 230,
  'NOT_ACCEPTABLE' : 240,
  'NOT_SUPPORTED_SERVICE' : 241,
  'STREAM_CREATE_ERROR' : 250,
  'UNKNOWN' : -1
};
var TCommandThreadDump = module.exports.TCommandThreadDump = function(args) {
  this.type = 0;
  this.name = null;
  this.pendingTimeMillis = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.pendingTimeMillis !== undefined && args.pendingTimeMillis !== null) {
      this.pendingTimeMillis = args.pendingTimeMillis;
    }
  }
};
TCommandThreadDump.prototype = {};
TCommandThreadDump.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.pendingTimeMillis = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCommandThreadDump.prototype.write = function(output) {
  output.writeStructBegin('TCommandThreadDump');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.pendingTimeMillis !== null && this.pendingTimeMillis !== undefined) {
    output.writeFieldBegin('pendingTimeMillis', Thrift.Type.I64, 3);
    output.writeI64(this.pendingTimeMillis);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TMonitorInfo = module.exports.TMonitorInfo = function(args) {
  this.stackDepth = null;
  this.stackFrame = null;
  if (args) {
    if (args.stackDepth !== undefined && args.stackDepth !== null) {
      this.stackDepth = args.stackDepth;
    }
    if (args.stackFrame !== undefined && args.stackFrame !== null) {
      this.stackFrame = args.stackFrame;
    }
  }
};
TMonitorInfo.prototype = {};
TMonitorInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.stackDepth = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.stackFrame = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TMonitorInfo.prototype.write = function(output) {
  output.writeStructBegin('TMonitorInfo');
  if (this.stackDepth !== null && this.stackDepth !== undefined) {
    output.writeFieldBegin('stackDepth', Thrift.Type.I32, 1);
    output.writeI32(this.stackDepth);
    output.writeFieldEnd();
  }
  if (this.stackFrame !== null && this.stackFrame !== undefined) {
    output.writeFieldBegin('stackFrame', Thrift.Type.STRING, 2);
    output.writeString(this.stackFrame);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TThreadDump = module.exports.TThreadDump = function(args) {
  this.threadName = null;
  this.threadId = null;
  this.blockedTime = null;
  this.blockedCount = null;
  this.waitedTime = null;
  this.waitedCount = null;
  this.lockName = null;
  this.lockOwnerId = null;
  this.lockOwnerName = null;
  this.inNative = null;
  this.suspended = null;
  this.threadState = null;
  this.stackTrace = null;
  this.lockedMonitors = null;
  this.lockedSynchronizers = null;
  if (args) {
    if (args.threadName !== undefined && args.threadName !== null) {
      this.threadName = args.threadName;
    }
    if (args.threadId !== undefined && args.threadId !== null) {
      this.threadId = args.threadId;
    }
    if (args.blockedTime !== undefined && args.blockedTime !== null) {
      this.blockedTime = args.blockedTime;
    }
    if (args.blockedCount !== undefined && args.blockedCount !== null) {
      this.blockedCount = args.blockedCount;
    }
    if (args.waitedTime !== undefined && args.waitedTime !== null) {
      this.waitedTime = args.waitedTime;
    }
    if (args.waitedCount !== undefined && args.waitedCount !== null) {
      this.waitedCount = args.waitedCount;
    }
    if (args.lockName !== undefined && args.lockName !== null) {
      this.lockName = args.lockName;
    }
    if (args.lockOwnerId !== undefined && args.lockOwnerId !== null) {
      this.lockOwnerId = args.lockOwnerId;
    }
    if (args.lockOwnerName !== undefined && args.lockOwnerName !== null) {
      this.lockOwnerName = args.lockOwnerName;
    }
    if (args.inNative !== undefined && args.inNative !== null) {
      this.inNative = args.inNative;
    }
    if (args.suspended !== undefined && args.suspended !== null) {
      this.suspended = args.suspended;
    }
    if (args.threadState !== undefined && args.threadState !== null) {
      this.threadState = args.threadState;
    }
    if (args.stackTrace !== undefined && args.stackTrace !== null) {
      this.stackTrace = Thrift.copyList(args.stackTrace, [null]);
    }
    if (args.lockedMonitors !== undefined && args.lockedMonitors !== null) {
      this.lockedMonitors = Thrift.copyList(args.lockedMonitors, [ttypes.TMonitorInfo]);
    }
    if (args.lockedSynchronizers !== undefined && args.lockedSynchronizers !== null) {
      this.lockedSynchronizers = Thrift.copyList(args.lockedSynchronizers, [null]);
    }
  }
};
TThreadDump.prototype = {};
TThreadDump.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.threadName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.threadId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.blockedTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.blockedCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.waitedTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.waitedCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.lockName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.lockOwnerId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.lockOwnerName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.inNative = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.suspended = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.threadState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        this.stackTrace = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = input.readString();
          this.stackTrace.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.LIST) {
        this.lockedMonitors = [];
        var _rtmp35 = input.readListBegin();
        var _size4 = _rtmp35.size || 0;
        for (var _i6 = 0; _i6 < _size4; ++_i6) {
          var elem7 = null;
          elem7 = new ttypes.TMonitorInfo();
          elem7.read(input);
          this.lockedMonitors.push(elem7);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.LIST) {
        this.lockedSynchronizers = [];
        var _rtmp39 = input.readListBegin();
        var _size8 = _rtmp39.size || 0;
        for (var _i10 = 0; _i10 < _size8; ++_i10) {
          var elem11 = null;
          elem11 = input.readString();
          this.lockedSynchronizers.push(elem11);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TThreadDump.prototype.write = function(output) {
  output.writeStructBegin('TThreadDump');
  if (this.threadName !== null && this.threadName !== undefined) {
    output.writeFieldBegin('threadName', Thrift.Type.STRING, 1);
    output.writeString(this.threadName);
    output.writeFieldEnd();
  }
  if (this.threadId !== null && this.threadId !== undefined) {
    output.writeFieldBegin('threadId', Thrift.Type.I64, 2);
    output.writeI64(this.threadId);
    output.writeFieldEnd();
  }
  if (this.blockedTime !== null && this.blockedTime !== undefined) {
    output.writeFieldBegin('blockedTime', Thrift.Type.I64, 3);
    output.writeI64(this.blockedTime);
    output.writeFieldEnd();
  }
  if (this.blockedCount !== null && this.blockedCount !== undefined) {
    output.writeFieldBegin('blockedCount', Thrift.Type.I64, 4);
    output.writeI64(this.blockedCount);
    output.writeFieldEnd();
  }
  if (this.waitedTime !== null && this.waitedTime !== undefined) {
    output.writeFieldBegin('waitedTime', Thrift.Type.I64, 5);
    output.writeI64(this.waitedTime);
    output.writeFieldEnd();
  }
  if (this.waitedCount !== null && this.waitedCount !== undefined) {
    output.writeFieldBegin('waitedCount', Thrift.Type.I64, 6);
    output.writeI64(this.waitedCount);
    output.writeFieldEnd();
  }
  if (this.lockName !== null && this.lockName !== undefined) {
    output.writeFieldBegin('lockName', Thrift.Type.STRING, 7);
    output.writeString(this.lockName);
    output.writeFieldEnd();
  }
  if (this.lockOwnerId !== null && this.lockOwnerId !== undefined) {
    output.writeFieldBegin('lockOwnerId', Thrift.Type.I64, 8);
    output.writeI64(this.lockOwnerId);
    output.writeFieldEnd();
  }
  if (this.lockOwnerName !== null && this.lockOwnerName !== undefined) {
    output.writeFieldBegin('lockOwnerName', Thrift.Type.STRING, 9);
    output.writeString(this.lockOwnerName);
    output.writeFieldEnd();
  }
  if (this.inNative !== null && this.inNative !== undefined) {
    output.writeFieldBegin('inNative', Thrift.Type.BOOL, 10);
    output.writeBool(this.inNative);
    output.writeFieldEnd();
  }
  if (this.suspended !== null && this.suspended !== undefined) {
    output.writeFieldBegin('suspended', Thrift.Type.BOOL, 11);
    output.writeBool(this.suspended);
    output.writeFieldEnd();
  }
  if (this.threadState !== null && this.threadState !== undefined) {
    output.writeFieldBegin('threadState', Thrift.Type.I32, 12);
    output.writeI32(this.threadState);
    output.writeFieldEnd();
  }
  if (this.stackTrace !== null && this.stackTrace !== undefined) {
    output.writeFieldBegin('stackTrace', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.STRING, this.stackTrace.length);
    for (var iter12 in this.stackTrace) {
      if (this.stackTrace.hasOwnProperty(iter12)) {
        iter12 = this.stackTrace[iter12];
        output.writeString(iter12);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.lockedMonitors !== null && this.lockedMonitors !== undefined) {
    output.writeFieldBegin('lockedMonitors', Thrift.Type.LIST, 14);
    output.writeListBegin(Thrift.Type.STRUCT, this.lockedMonitors.length);
    for (var iter13 in this.lockedMonitors) {
      if (this.lockedMonitors.hasOwnProperty(iter13)) {
        iter13 = this.lockedMonitors[iter13];
        iter13.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.lockedSynchronizers !== null && this.lockedSynchronizers !== undefined) {
    output.writeFieldBegin('lockedSynchronizers', Thrift.Type.LIST, 15);
    output.writeListBegin(Thrift.Type.STRING, this.lockedSynchronizers.length);
    for (var iter14 in this.lockedSynchronizers) {
      if (this.lockedSynchronizers.hasOwnProperty(iter14)) {
        iter14 = this.lockedSynchronizers[iter14];
        output.writeString(iter14);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TThreadLightDump = module.exports.TThreadLightDump = function(args) {
  this.threadName = null;
  this.threadId = null;
  this.threadState = null;
  if (args) {
    if (args.threadName !== undefined && args.threadName !== null) {
      this.threadName = args.threadName;
    }
    if (args.threadId !== undefined && args.threadId !== null) {
      this.threadId = args.threadId;
    }
    if (args.threadState !== undefined && args.threadState !== null) {
      this.threadState = args.threadState;
    }
  }
};
TThreadLightDump.prototype = {};
TThreadLightDump.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.threadName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.threadId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.threadState = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TThreadLightDump.prototype.write = function(output) {
  output.writeStructBegin('TThreadLightDump');
  if (this.threadName !== null && this.threadName !== undefined) {
    output.writeFieldBegin('threadName', Thrift.Type.STRING, 1);
    output.writeString(this.threadName);
    output.writeFieldEnd();
  }
  if (this.threadId !== null && this.threadId !== undefined) {
    output.writeFieldBegin('threadId', Thrift.Type.I64, 2);
    output.writeI64(this.threadId);
    output.writeFieldEnd();
  }
  if (this.threadState !== null && this.threadState !== undefined) {
    output.writeFieldBegin('threadState', Thrift.Type.I32, 3);
    output.writeI32(this.threadState);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCommandThreadDumpResponse = module.exports.TCommandThreadDumpResponse = function(args) {
  this.threadDumps = null;
  if (args) {
    if (args.threadDumps !== undefined && args.threadDumps !== null) {
      this.threadDumps = Thrift.copyList(args.threadDumps, [ttypes.TThreadDump]);
    }
  }
};
TCommandThreadDumpResponse.prototype = {};
TCommandThreadDumpResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.threadDumps = [];
        var _rtmp316 = input.readListBegin();
        var _size15 = _rtmp316.size || 0;
        for (var _i17 = 0; _i17 < _size15; ++_i17) {
          var elem18 = null;
          elem18 = new ttypes.TThreadDump();
          elem18.read(input);
          this.threadDumps.push(elem18);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCommandThreadDumpResponse.prototype.write = function(output) {
  output.writeStructBegin('TCommandThreadDumpResponse');
  if (this.threadDumps !== null && this.threadDumps !== undefined) {
    output.writeFieldBegin('threadDumps', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.threadDumps.length);
    for (var iter19 in this.threadDumps) {
      if (this.threadDumps.hasOwnProperty(iter19)) {
        iter19 = this.threadDumps[iter19];
        iter19.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCmdActiveThreadCount = module.exports.TCmdActiveThreadCount = function(args) {
};
TCmdActiveThreadCount.prototype = {};
TCmdActiveThreadCount.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCmdActiveThreadCount.prototype.write = function(output) {
  output.writeStructBegin('TCmdActiveThreadCount');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCmdActiveThreadCountRes = module.exports.TCmdActiveThreadCountRes = function(args) {
  this.histogramSchemaType = null;
  this.activeThreadCount = null;
  this.timeStamp = null;
  if (args) {
    if (args.histogramSchemaType !== undefined && args.histogramSchemaType !== null) {
      this.histogramSchemaType = args.histogramSchemaType;
    }
    if (args.activeThreadCount !== undefined && args.activeThreadCount !== null) {
      this.activeThreadCount = Thrift.copyList(args.activeThreadCount, [null]);
    }
    if (args.timeStamp !== undefined && args.timeStamp !== null) {
      this.timeStamp = args.timeStamp;
    }
  }
};
TCmdActiveThreadCountRes.prototype = {};
TCmdActiveThreadCountRes.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.histogramSchemaType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.activeThreadCount = [];
        var _rtmp321 = input.readListBegin();
        var _size20 = _rtmp321.size || 0;
        for (var _i22 = 0; _i22 < _size20; ++_i22) {
          var elem23 = null;
          elem23 = input.readI32();
          this.activeThreadCount.push(elem23);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.timeStamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCmdActiveThreadCountRes.prototype.write = function(output) {
  output.writeStructBegin('TCmdActiveThreadCountRes');
  if (this.histogramSchemaType !== null && this.histogramSchemaType !== undefined) {
    output.writeFieldBegin('histogramSchemaType', Thrift.Type.I32, 1);
    output.writeI32(this.histogramSchemaType);
    output.writeFieldEnd();
  }
  if (this.activeThreadCount !== null && this.activeThreadCount !== undefined) {
    output.writeFieldBegin('activeThreadCount', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.activeThreadCount.length);
    for (var iter24 in this.activeThreadCount) {
      if (this.activeThreadCount.hasOwnProperty(iter24)) {
        iter24 = this.activeThreadCount[iter24];
        output.writeI32(iter24);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timeStamp !== null && this.timeStamp !== undefined) {
    output.writeFieldBegin('timeStamp', Thrift.Type.I64, 3);
    output.writeI64(this.timeStamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TActiveThreadDump = module.exports.TActiveThreadDump = function(args) {
  this.startTime = null;
  this.localTraceId = null;
  this.threadDump = null;
  this.sampled = false;
  this.transactionId = null;
  this.entryPoint = null;
  if (args) {
    if (args.startTime !== undefined && args.startTime !== null) {
      this.startTime = args.startTime;
    }
    if (args.localTraceId !== undefined && args.localTraceId !== null) {
      this.localTraceId = args.localTraceId;
    }
    if (args.threadDump !== undefined && args.threadDump !== null) {
      this.threadDump = new ttypes.TThreadDump(args.threadDump);
    }
    if (args.sampled !== undefined && args.sampled !== null) {
      this.sampled = args.sampled;
    }
    if (args.transactionId !== undefined && args.transactionId !== null) {
      this.transactionId = args.transactionId;
    }
    if (args.entryPoint !== undefined && args.entryPoint !== null) {
      this.entryPoint = args.entryPoint;
    }
  }
};
TActiveThreadDump.prototype = {};
TActiveThreadDump.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.startTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.localTraceId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.threadDump = new ttypes.TThreadDump();
        this.threadDump.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.sampled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.transactionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.entryPoint = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TActiveThreadDump.prototype.write = function(output) {
  output.writeStructBegin('TActiveThreadDump');
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.I64, 1);
    output.writeI64(this.startTime);
    output.writeFieldEnd();
  }
  if (this.localTraceId !== null && this.localTraceId !== undefined) {
    output.writeFieldBegin('localTraceId', Thrift.Type.I64, 2);
    output.writeI64(this.localTraceId);
    output.writeFieldEnd();
  }
  if (this.threadDump !== null && this.threadDump !== undefined) {
    output.writeFieldBegin('threadDump', Thrift.Type.STRUCT, 3);
    this.threadDump.write(output);
    output.writeFieldEnd();
  }
  if (this.sampled !== null && this.sampled !== undefined) {
    output.writeFieldBegin('sampled', Thrift.Type.BOOL, 4);
    output.writeBool(this.sampled);
    output.writeFieldEnd();
  }
  if (this.transactionId !== null && this.transactionId !== undefined) {
    output.writeFieldBegin('transactionId', Thrift.Type.STRING, 5);
    output.writeString(this.transactionId);
    output.writeFieldEnd();
  }
  if (this.entryPoint !== null && this.entryPoint !== undefined) {
    output.writeFieldBegin('entryPoint', Thrift.Type.STRING, 6);
    output.writeString(this.entryPoint);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TActiveThreadLightDump = module.exports.TActiveThreadLightDump = function(args) {
  this.startTime = null;
  this.localTraceId = null;
  this.threadDump = null;
  this.sampled = false;
  this.transactionId = null;
  this.entryPoint = null;
  if (args) {
    if (args.startTime !== undefined && args.startTime !== null) {
      this.startTime = args.startTime;
    }
    if (args.localTraceId !== undefined && args.localTraceId !== null) {
      this.localTraceId = args.localTraceId;
    }
    if (args.threadDump !== undefined && args.threadDump !== null) {
      this.threadDump = new ttypes.TThreadLightDump(args.threadDump);
    }
    if (args.sampled !== undefined && args.sampled !== null) {
      this.sampled = args.sampled;
    }
    if (args.transactionId !== undefined && args.transactionId !== null) {
      this.transactionId = args.transactionId;
    }
    if (args.entryPoint !== undefined && args.entryPoint !== null) {
      this.entryPoint = args.entryPoint;
    }
  }
};
TActiveThreadLightDump.prototype = {};
TActiveThreadLightDump.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.startTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.localTraceId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.threadDump = new ttypes.TThreadLightDump();
        this.threadDump.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.sampled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.transactionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.entryPoint = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TActiveThreadLightDump.prototype.write = function(output) {
  output.writeStructBegin('TActiveThreadLightDump');
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.I64, 1);
    output.writeI64(this.startTime);
    output.writeFieldEnd();
  }
  if (this.localTraceId !== null && this.localTraceId !== undefined) {
    output.writeFieldBegin('localTraceId', Thrift.Type.I64, 2);
    output.writeI64(this.localTraceId);
    output.writeFieldEnd();
  }
  if (this.threadDump !== null && this.threadDump !== undefined) {
    output.writeFieldBegin('threadDump', Thrift.Type.STRUCT, 3);
    this.threadDump.write(output);
    output.writeFieldEnd();
  }
  if (this.sampled !== null && this.sampled !== undefined) {
    output.writeFieldBegin('sampled', Thrift.Type.BOOL, 4);
    output.writeBool(this.sampled);
    output.writeFieldEnd();
  }
  if (this.transactionId !== null && this.transactionId !== undefined) {
    output.writeFieldBegin('transactionId', Thrift.Type.STRING, 5);
    output.writeString(this.transactionId);
    output.writeFieldEnd();
  }
  if (this.entryPoint !== null && this.entryPoint !== undefined) {
    output.writeFieldBegin('entryPoint', Thrift.Type.STRING, 6);
    output.writeString(this.entryPoint);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCmdActiveThreadDump = module.exports.TCmdActiveThreadDump = function(args) {
  this.limit = null;
  this.threadNameList = null;
  this.localTraceIdList = null;
  if (args) {
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
    if (args.threadNameList !== undefined && args.threadNameList !== null) {
      this.threadNameList = Thrift.copyList(args.threadNameList, [null]);
    }
    if (args.localTraceIdList !== undefined && args.localTraceIdList !== null) {
      this.localTraceIdList = Thrift.copyList(args.localTraceIdList, [null]);
    }
  }
};
TCmdActiveThreadDump.prototype = {};
TCmdActiveThreadDump.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.threadNameList = [];
        var _rtmp326 = input.readListBegin();
        var _size25 = _rtmp326.size || 0;
        for (var _i27 = 0; _i27 < _size25; ++_i27) {
          var elem28 = null;
          elem28 = input.readString();
          this.threadNameList.push(elem28);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.localTraceIdList = [];
        var _rtmp330 = input.readListBegin();
        var _size29 = _rtmp330.size || 0;
        for (var _i31 = 0; _i31 < _size29; ++_i31) {
          var elem32 = null;
          elem32 = input.readI64();
          this.localTraceIdList.push(elem32);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCmdActiveThreadDump.prototype.write = function(output) {
  output.writeStructBegin('TCmdActiveThreadDump');
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 1);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  if (this.threadNameList !== null && this.threadNameList !== undefined) {
    output.writeFieldBegin('threadNameList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.threadNameList.length);
    for (var iter33 in this.threadNameList) {
      if (this.threadNameList.hasOwnProperty(iter33)) {
        iter33 = this.threadNameList[iter33];
        output.writeString(iter33);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.localTraceIdList !== null && this.localTraceIdList !== undefined) {
    output.writeFieldBegin('localTraceIdList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I64, this.localTraceIdList.length);
    for (var iter34 in this.localTraceIdList) {
      if (this.localTraceIdList.hasOwnProperty(iter34)) {
        iter34 = this.localTraceIdList[iter34];
        output.writeI64(iter34);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCmdActiveThreadLightDump = module.exports.TCmdActiveThreadLightDump = function(args) {
  this.limit = null;
  this.threadNameList = null;
  this.localTraceIdList = null;
  if (args) {
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
    if (args.threadNameList !== undefined && args.threadNameList !== null) {
      this.threadNameList = Thrift.copyList(args.threadNameList, [null]);
    }
    if (args.localTraceIdList !== undefined && args.localTraceIdList !== null) {
      this.localTraceIdList = Thrift.copyList(args.localTraceIdList, [null]);
    }
  }
};
TCmdActiveThreadLightDump.prototype = {};
TCmdActiveThreadLightDump.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.threadNameList = [];
        var _rtmp336 = input.readListBegin();
        var _size35 = _rtmp336.size || 0;
        for (var _i37 = 0; _i37 < _size35; ++_i37) {
          var elem38 = null;
          elem38 = input.readString();
          this.threadNameList.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.localTraceIdList = [];
        var _rtmp340 = input.readListBegin();
        var _size39 = _rtmp340.size || 0;
        for (var _i41 = 0; _i41 < _size39; ++_i41) {
          var elem42 = null;
          elem42 = input.readI64();
          this.localTraceIdList.push(elem42);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCmdActiveThreadLightDump.prototype.write = function(output) {
  output.writeStructBegin('TCmdActiveThreadLightDump');
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 1);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  if (this.threadNameList !== null && this.threadNameList !== undefined) {
    output.writeFieldBegin('threadNameList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.threadNameList.length);
    for (var iter43 in this.threadNameList) {
      if (this.threadNameList.hasOwnProperty(iter43)) {
        iter43 = this.threadNameList[iter43];
        output.writeString(iter43);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.localTraceIdList !== null && this.localTraceIdList !== undefined) {
    output.writeFieldBegin('localTraceIdList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I64, this.localTraceIdList.length);
    for (var iter44 in this.localTraceIdList) {
      if (this.localTraceIdList.hasOwnProperty(iter44)) {
        iter44 = this.localTraceIdList[iter44];
        output.writeI64(iter44);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCmdActiveThreadDumpRes = module.exports.TCmdActiveThreadDumpRes = function(args) {
  this.threadDumps = null;
  this.type = null;
  this.subType = null;
  this.version = null;
  if (args) {
    if (args.threadDumps !== undefined && args.threadDumps !== null) {
      this.threadDumps = Thrift.copyList(args.threadDumps, [ttypes.TActiveThreadDump]);
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.subType !== undefined && args.subType !== null) {
      this.subType = args.subType;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
  }
};
TCmdActiveThreadDumpRes.prototype = {};
TCmdActiveThreadDumpRes.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.threadDumps = [];
        var _rtmp346 = input.readListBegin();
        var _size45 = _rtmp346.size || 0;
        for (var _i47 = 0; _i47 < _size45; ++_i47) {
          var elem48 = null;
          elem48 = new ttypes.TActiveThreadDump();
          elem48.read(input);
          this.threadDumps.push(elem48);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.subType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCmdActiveThreadDumpRes.prototype.write = function(output) {
  output.writeStructBegin('TCmdActiveThreadDumpRes');
  if (this.threadDumps !== null && this.threadDumps !== undefined) {
    output.writeFieldBegin('threadDumps', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.threadDumps.length);
    for (var iter49 in this.threadDumps) {
      if (this.threadDumps.hasOwnProperty(iter49)) {
        iter49 = this.threadDumps[iter49];
        iter49.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 2);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.subType !== null && this.subType !== undefined) {
    output.writeFieldBegin('subType', Thrift.Type.STRING, 3);
    output.writeString(this.subType);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 4);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCmdActiveThreadLightDumpRes = module.exports.TCmdActiveThreadLightDumpRes = function(args) {
  this.threadDumps = null;
  this.type = null;
  this.subType = null;
  this.version = null;
  if (args) {
    if (args.threadDumps !== undefined && args.threadDumps !== null) {
      this.threadDumps = Thrift.copyList(args.threadDumps, [ttypes.TActiveThreadLightDump]);
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.subType !== undefined && args.subType !== null) {
      this.subType = args.subType;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
  }
};
TCmdActiveThreadLightDumpRes.prototype = {};
TCmdActiveThreadLightDumpRes.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.threadDumps = [];
        var _rtmp351 = input.readListBegin();
        var _size50 = _rtmp351.size || 0;
        for (var _i52 = 0; _i52 < _size50; ++_i52) {
          var elem53 = null;
          elem53 = new ttypes.TActiveThreadLightDump();
          elem53.read(input);
          this.threadDumps.push(elem53);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.subType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCmdActiveThreadLightDumpRes.prototype.write = function(output) {
  output.writeStructBegin('TCmdActiveThreadLightDumpRes');
  if (this.threadDumps !== null && this.threadDumps !== undefined) {
    output.writeFieldBegin('threadDumps', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.threadDumps.length);
    for (var iter54 in this.threadDumps) {
      if (this.threadDumps.hasOwnProperty(iter54)) {
        iter54 = this.threadDumps[iter54];
        iter54.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 2);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.subType !== null && this.subType !== undefined) {
    output.writeFieldBegin('subType', Thrift.Type.STRING, 3);
    output.writeString(this.subType);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 4);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCommandEcho = module.exports.TCommandEcho = function(args) {
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
TCommandEcho.prototype = {};
TCommandEcho.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCommandEcho.prototype.write = function(output) {
  output.writeStructBegin('TCommandEcho');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCommandTransfer = module.exports.TCommandTransfer = function(args) {
  this.applicationName = null;
  this.agentId = null;
  this.startTime = null;
  this.payload = null;
  if (args) {
    if (args.applicationName !== undefined && args.applicationName !== null) {
      this.applicationName = args.applicationName;
    }
    if (args.agentId !== undefined && args.agentId !== null) {
      this.agentId = args.agentId;
    }
    if (args.startTime !== undefined && args.startTime !== null) {
      this.startTime = args.startTime;
    }
    if (args.payload !== undefined && args.payload !== null) {
      this.payload = args.payload;
    }
  }
};
TCommandTransfer.prototype = {};
TCommandTransfer.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.applicationName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.agentId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.startTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.payload = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCommandTransfer.prototype.write = function(output) {
  output.writeStructBegin('TCommandTransfer');
  if (this.applicationName !== null && this.applicationName !== undefined) {
    output.writeFieldBegin('applicationName', Thrift.Type.STRING, 1);
    output.writeString(this.applicationName);
    output.writeFieldEnd();
  }
  if (this.agentId !== null && this.agentId !== undefined) {
    output.writeFieldBegin('agentId', Thrift.Type.STRING, 2);
    output.writeString(this.agentId);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.I64, 3);
    output.writeI64(this.startTime);
    output.writeFieldEnd();
  }
  if (this.payload !== null && this.payload !== undefined) {
    output.writeFieldBegin('payload', Thrift.Type.STRING, 4);
    output.writeBinary(this.payload);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TCommandTransferResponse = module.exports.TCommandTransferResponse = function(args) {
  this.routeResult = null;
  this.payload = null;
  this.message = null;
  if (args) {
    if (args.routeResult !== undefined && args.routeResult !== null) {
      this.routeResult = args.routeResult;
    }
    if (args.payload !== undefined && args.payload !== null) {
      this.payload = args.payload;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
TCommandTransferResponse.prototype = {};
TCommandTransferResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.routeResult = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.payload = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCommandTransferResponse.prototype.write = function(output) {
  output.writeStructBegin('TCommandTransferResponse');
  if (this.routeResult !== null && this.routeResult !== undefined) {
    output.writeFieldBegin('routeResult', Thrift.Type.I32, 1);
    output.writeI32(this.routeResult);
    output.writeFieldEnd();
  }
  if (this.payload !== null && this.payload !== undefined) {
    output.writeFieldBegin('payload', Thrift.Type.STRING, 2);
    output.writeBinary(this.payload);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 3);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

