//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


TIntStringValue = function(args) {
  this.intValue = null;
  this.stringValue = null;
  if (args) {
    if (args.intValue !== undefined && args.intValue !== null) {
      this.intValue = args.intValue;
    }
    if (args.stringValue !== undefined && args.stringValue !== null) {
      this.stringValue = args.stringValue;
    }
  }
};
TIntStringValue.prototype = {};
TIntStringValue.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.intValue = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.stringValue = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TIntStringValue.prototype.write = function(output) {
  output.writeStructBegin('TIntStringValue');
  if (this.intValue !== null && this.intValue !== undefined) {
    output.writeFieldBegin('intValue', Thrift.Type.I32, 1);
    output.writeI32(this.intValue);
    output.writeFieldEnd();
  }
  if (this.stringValue !== null && this.stringValue !== undefined) {
    output.writeFieldBegin('stringValue', Thrift.Type.STRING, 2);
    output.writeString(this.stringValue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TIntStringStringValue = function(args) {
  this.intValue = null;
  this.stringValue1 = null;
  this.stringValue2 = null;
  if (args) {
    if (args.intValue !== undefined && args.intValue !== null) {
      this.intValue = args.intValue;
    }
    if (args.stringValue1 !== undefined && args.stringValue1 !== null) {
      this.stringValue1 = args.stringValue1;
    }
    if (args.stringValue2 !== undefined && args.stringValue2 !== null) {
      this.stringValue2 = args.stringValue2;
    }
  }
};
TIntStringStringValue.prototype = {};
TIntStringStringValue.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.intValue = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.stringValue1 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.stringValue2 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TIntStringStringValue.prototype.write = function(output) {
  output.writeStructBegin('TIntStringStringValue');
  if (this.intValue !== null && this.intValue !== undefined) {
    output.writeFieldBegin('intValue', Thrift.Type.I32, 1);
    output.writeI32(this.intValue);
    output.writeFieldEnd();
  }
  if (this.stringValue1 !== null && this.stringValue1 !== undefined) {
    output.writeFieldBegin('stringValue1', Thrift.Type.STRING, 2);
    output.writeString(this.stringValue1);
    output.writeFieldEnd();
  }
  if (this.stringValue2 !== null && this.stringValue2 !== undefined) {
    output.writeFieldBegin('stringValue2', Thrift.Type.STRING, 3);
    output.writeString(this.stringValue2);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TLongIntIntByteByteStringValue = function(args) {
  this.longValue = null;
  this.intValue1 = null;
  this.intValue2 = null;
  this.byteValue1 = null;
  this.byteValue2 = null;
  this.stringValue = null;
  if (args) {
    if (args.longValue !== undefined && args.longValue !== null) {
      this.longValue = args.longValue;
    }
    if (args.intValue1 !== undefined && args.intValue1 !== null) {
      this.intValue1 = args.intValue1;
    }
    if (args.intValue2 !== undefined && args.intValue2 !== null) {
      this.intValue2 = args.intValue2;
    }
    if (args.byteValue1 !== undefined && args.byteValue1 !== null) {
      this.byteValue1 = args.byteValue1;
    }
    if (args.byteValue2 !== undefined && args.byteValue2 !== null) {
      this.byteValue2 = args.byteValue2;
    }
    if (args.stringValue !== undefined && args.stringValue !== null) {
      this.stringValue = args.stringValue;
    }
  }
};
TLongIntIntByteByteStringValue.prototype = {};
TLongIntIntByteByteStringValue.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.longValue = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.intValue1 = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.intValue2 = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BYTE) {
        this.byteValue1 = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BYTE) {
        this.byteValue2 = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.stringValue = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TLongIntIntByteByteStringValue.prototype.write = function(output) {
  output.writeStructBegin('TLongIntIntByteByteStringValue');
  if (this.longValue !== null && this.longValue !== undefined) {
    output.writeFieldBegin('longValue', Thrift.Type.I64, 1);
    output.writeI64(this.longValue);
    output.writeFieldEnd();
  }
  if (this.intValue1 !== null && this.intValue1 !== undefined) {
    output.writeFieldBegin('intValue1', Thrift.Type.I32, 2);
    output.writeI32(this.intValue1);
    output.writeFieldEnd();
  }
  if (this.intValue2 !== null && this.intValue2 !== undefined) {
    output.writeFieldBegin('intValue2', Thrift.Type.I32, 3);
    output.writeI32(this.intValue2);
    output.writeFieldEnd();
  }
  if (this.byteValue1 !== null && this.byteValue1 !== undefined) {
    output.writeFieldBegin('byteValue1', Thrift.Type.BYTE, 4);
    output.writeByte(this.byteValue1);
    output.writeFieldEnd();
  }
  if (this.byteValue2 !== null && this.byteValue2 !== undefined) {
    output.writeFieldBegin('byteValue2', Thrift.Type.BYTE, 5);
    output.writeByte(this.byteValue2);
    output.writeFieldEnd();
  }
  if (this.stringValue !== null && this.stringValue !== undefined) {
    output.writeFieldBegin('stringValue', Thrift.Type.STRING, 6);
    output.writeString(this.stringValue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TIntBooleanIntBooleanValue = function(args) {
  this.intValue1 = null;
  this.boolValue1 = null;
  this.intValue2 = null;
  this.boolValue2 = null;
  if (args) {
    if (args.intValue1 !== undefined && args.intValue1 !== null) {
      this.intValue1 = args.intValue1;
    }
    if (args.boolValue1 !== undefined && args.boolValue1 !== null) {
      this.boolValue1 = args.boolValue1;
    }
    if (args.intValue2 !== undefined && args.intValue2 !== null) {
      this.intValue2 = args.intValue2;
    }
    if (args.boolValue2 !== undefined && args.boolValue2 !== null) {
      this.boolValue2 = args.boolValue2;
    }
  }
};
TIntBooleanIntBooleanValue.prototype = {};
TIntBooleanIntBooleanValue.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.intValue1 = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.boolValue1 = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.intValue2 = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.boolValue2 = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TIntBooleanIntBooleanValue.prototype.write = function(output) {
  output.writeStructBegin('TIntBooleanIntBooleanValue');
  if (this.intValue1 !== null && this.intValue1 !== undefined) {
    output.writeFieldBegin('intValue1', Thrift.Type.I32, 1);
    output.writeI32(this.intValue1);
    output.writeFieldEnd();
  }
  if (this.boolValue1 !== null && this.boolValue1 !== undefined) {
    output.writeFieldBegin('boolValue1', Thrift.Type.BOOL, 2);
    output.writeBool(this.boolValue1);
    output.writeFieldEnd();
  }
  if (this.intValue2 !== null && this.intValue2 !== undefined) {
    output.writeFieldBegin('intValue2', Thrift.Type.I32, 3);
    output.writeI32(this.intValue2);
    output.writeFieldEnd();
  }
  if (this.boolValue2 !== null && this.boolValue2 !== undefined) {
    output.writeFieldBegin('boolValue2', Thrift.Type.BOOL, 4);
    output.writeBool(this.boolValue2);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TStringStringValue = function(args) {
  this.stringValue1 = null;
  this.stringValue2 = null;
  if (args) {
    if (args.stringValue1 !== undefined && args.stringValue1 !== null) {
      this.stringValue1 = args.stringValue1;
    }
    if (args.stringValue2 !== undefined && args.stringValue2 !== null) {
      this.stringValue2 = args.stringValue2;
    }
  }
};
TStringStringValue.prototype = {};
TStringStringValue.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.stringValue1 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.stringValue2 = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TStringStringValue.prototype.write = function(output) {
  output.writeStructBegin('TStringStringValue');
  if (this.stringValue1 !== null && this.stringValue1 !== undefined) {
    output.writeFieldBegin('stringValue1', Thrift.Type.STRING, 1);
    output.writeString(this.stringValue1);
    output.writeFieldEnd();
  }
  if (this.stringValue2 !== null && this.stringValue2 !== undefined) {
    output.writeFieldBegin('stringValue2', Thrift.Type.STRING, 2);
    output.writeString(this.stringValue2);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TAnnotationValue = function(args) {
  this.stringValue = null;
  this.boolValue = null;
  this.intValue = null;
  this.longValue = null;
  this.shortValue = null;
  this.doubleValue = null;
  this.binaryValue = null;
  this.byteValue = null;
  this.intStringValue = null;
  this.intStringStringValue = null;
  this.longIntIntByteByteStringValue = null;
  this.intBooleanIntBooleanValue = null;
  this.stringStringValue = null;
  if (args) {
    if (args.stringValue !== undefined && args.stringValue !== null) {
      this.stringValue = args.stringValue;
    }
    if (args.boolValue !== undefined && args.boolValue !== null) {
      this.boolValue = args.boolValue;
    }
    if (args.intValue !== undefined && args.intValue !== null) {
      this.intValue = args.intValue;
    }
    if (args.longValue !== undefined && args.longValue !== null) {
      this.longValue = args.longValue;
    }
    if (args.shortValue !== undefined && args.shortValue !== null) {
      this.shortValue = args.shortValue;
    }
    if (args.doubleValue !== undefined && args.doubleValue !== null) {
      this.doubleValue = args.doubleValue;
    }
    if (args.binaryValue !== undefined && args.binaryValue !== null) {
      this.binaryValue = args.binaryValue;
    }
    if (args.byteValue !== undefined && args.byteValue !== null) {
      this.byteValue = args.byteValue;
    }
    if (args.intStringValue !== undefined && args.intStringValue !== null) {
      this.intStringValue = new TIntStringValue(args.intStringValue);
    }
    if (args.intStringStringValue !== undefined && args.intStringStringValue !== null) {
      this.intStringStringValue = new TIntStringStringValue(args.intStringStringValue);
    }
    if (args.longIntIntByteByteStringValue !== undefined && args.longIntIntByteByteStringValue !== null) {
      this.longIntIntByteByteStringValue = new TLongIntIntByteByteStringValue(args.longIntIntByteByteStringValue);
    }
    if (args.intBooleanIntBooleanValue !== undefined && args.intBooleanIntBooleanValue !== null) {
      this.intBooleanIntBooleanValue = new TIntBooleanIntBooleanValue(args.intBooleanIntBooleanValue);
    }
    if (args.stringStringValue !== undefined && args.stringStringValue !== null) {
      this.stringStringValue = new TStringStringValue(args.stringStringValue);
    }
  }
};
TAnnotationValue.prototype = {};
TAnnotationValue.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.stringValue = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.boolValue = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.intValue = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.longValue = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I16) {
        this.shortValue = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.doubleValue = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.binaryValue = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BYTE) {
        this.byteValue = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.intStringValue = new TIntStringValue();
        this.intStringValue.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.intStringStringValue = new TIntStringStringValue();
        this.intStringStringValue.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.longIntIntByteByteStringValue = new TLongIntIntByteByteStringValue();
        this.longIntIntByteByteStringValue.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.intBooleanIntBooleanValue = new TIntBooleanIntBooleanValue();
        this.intBooleanIntBooleanValue.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.stringStringValue = new TStringStringValue();
        this.stringStringValue.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TAnnotationValue.prototype.write = function(output) {
  output.writeStructBegin('TAnnotationValue');
  if (this.stringValue !== null && this.stringValue !== undefined) {
    output.writeFieldBegin('stringValue', Thrift.Type.STRING, 1);
    output.writeString(this.stringValue);
    output.writeFieldEnd();
  }
  if (this.boolValue !== null && this.boolValue !== undefined) {
    output.writeFieldBegin('boolValue', Thrift.Type.BOOL, 2);
    output.writeBool(this.boolValue);
    output.writeFieldEnd();
  }
  if (this.intValue !== null && this.intValue !== undefined) {
    output.writeFieldBegin('intValue', Thrift.Type.I32, 3);
    output.writeI32(this.intValue);
    output.writeFieldEnd();
  }
  if (this.longValue !== null && this.longValue !== undefined) {
    output.writeFieldBegin('longValue', Thrift.Type.I64, 4);
    output.writeI64(this.longValue);
    output.writeFieldEnd();
  }
  if (this.shortValue !== null && this.shortValue !== undefined) {
    output.writeFieldBegin('shortValue', Thrift.Type.I16, 5);
    output.writeI16(this.shortValue);
    output.writeFieldEnd();
  }
  if (this.doubleValue !== null && this.doubleValue !== undefined) {
    output.writeFieldBegin('doubleValue', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.doubleValue);
    output.writeFieldEnd();
  }
  if (this.binaryValue !== null && this.binaryValue !== undefined) {
    output.writeFieldBegin('binaryValue', Thrift.Type.STRING, 7);
    output.writeBinary(this.binaryValue);
    output.writeFieldEnd();
  }
  if (this.byteValue !== null && this.byteValue !== undefined) {
    output.writeFieldBegin('byteValue', Thrift.Type.BYTE, 8);
    output.writeByte(this.byteValue);
    output.writeFieldEnd();
  }
  if (this.intStringValue !== null && this.intStringValue !== undefined) {
    output.writeFieldBegin('intStringValue', Thrift.Type.STRUCT, 9);
    this.intStringValue.write(output);
    output.writeFieldEnd();
  }
  if (this.intStringStringValue !== null && this.intStringStringValue !== undefined) {
    output.writeFieldBegin('intStringStringValue', Thrift.Type.STRUCT, 10);
    this.intStringStringValue.write(output);
    output.writeFieldEnd();
  }
  if (this.longIntIntByteByteStringValue !== null && this.longIntIntByteByteStringValue !== undefined) {
    output.writeFieldBegin('longIntIntByteByteStringValue', Thrift.Type.STRUCT, 11);
    this.longIntIntByteByteStringValue.write(output);
    output.writeFieldEnd();
  }
  if (this.intBooleanIntBooleanValue !== null && this.intBooleanIntBooleanValue !== undefined) {
    output.writeFieldBegin('intBooleanIntBooleanValue', Thrift.Type.STRUCT, 12);
    this.intBooleanIntBooleanValue.write(output);
    output.writeFieldEnd();
  }
  if (this.stringStringValue !== null && this.stringStringValue !== undefined) {
    output.writeFieldBegin('stringStringValue', Thrift.Type.STRUCT, 13);
    this.stringStringValue.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TAnnotation = function(args) {
  this.key = null;
  this.value = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = new TAnnotationValue(args.value);
    }
  }
};
TAnnotation.prototype = {};
TAnnotation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.key = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.value = new TAnnotationValue();
        this.value.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TAnnotation.prototype.write = function(output) {
  output.writeStructBegin('TAnnotation');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.I32, 1);
    output.writeI32(this.key);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRUCT, 2);
    this.value.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TSpanEvent = function(args) {
  this.spanId = null;
  this.sequence = null;
  this.startElapsed = 0;
  this.endElapsed = 0;
  this.rpc = null;
  this.serviceType = null;
  this.endPoint = null;
  this.annotations = null;
  this.depth = -1;
  this.nextSpanId = -1;
  this.destinationId = null;
  this.apiId = null;
  this.exceptionInfo = null;
  this.asyncId = null;
  this.nextAsyncId = null;
  this.asyncSequence = null;
  if (args) {
    if (args.spanId !== undefined && args.spanId !== null) {
      this.spanId = args.spanId;
    }
    if (args.sequence !== undefined && args.sequence !== null) {
      this.sequence = args.sequence;
    }
    if (args.startElapsed !== undefined && args.startElapsed !== null) {
      this.startElapsed = args.startElapsed;
    }
    if (args.endElapsed !== undefined && args.endElapsed !== null) {
      this.endElapsed = args.endElapsed;
    }
    if (args.rpc !== undefined && args.rpc !== null) {
      this.rpc = args.rpc;
    }
    if (args.serviceType !== undefined && args.serviceType !== null) {
      this.serviceType = args.serviceType;
    }
    if (args.endPoint !== undefined && args.endPoint !== null) {
      this.endPoint = args.endPoint;
    }
    if (args.annotations !== undefined && args.annotations !== null) {
      this.annotations = Thrift.copyList(args.annotations, [TAnnotation]);
    }
    if (args.depth !== undefined && args.depth !== null) {
      this.depth = args.depth;
    }
    if (args.nextSpanId !== undefined && args.nextSpanId !== null) {
      this.nextSpanId = args.nextSpanId;
    }
    if (args.destinationId !== undefined && args.destinationId !== null) {
      this.destinationId = args.destinationId;
    }
    if (args.apiId !== undefined && args.apiId !== null) {
      this.apiId = args.apiId;
    }
    if (args.exceptionInfo !== undefined && args.exceptionInfo !== null) {
      this.exceptionInfo = new TIntStringValue(args.exceptionInfo);
    }
    if (args.asyncId !== undefined && args.asyncId !== null) {
      this.asyncId = args.asyncId;
    }
    if (args.nextAsyncId !== undefined && args.nextAsyncId !== null) {
      this.nextAsyncId = args.nextAsyncId;
    }
    if (args.asyncSequence !== undefined && args.asyncSequence !== null) {
      this.asyncSequence = args.asyncSequence;
    }
  }
};
TSpanEvent.prototype = {};
TSpanEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.spanId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I16) {
        this.sequence = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.startElapsed = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.endElapsed = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.rpc = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I16) {
        this.serviceType = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.endPoint = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.annotations = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new TAnnotation();
          elem6.read(input);
          this.annotations.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I32) {
        this.depth = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I64) {
        this.nextSpanId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.destinationId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.I32) {
        this.apiId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.STRUCT) {
        this.exceptionInfo = new TIntStringValue();
        this.exceptionInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.I32) {
        this.asyncId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.I32) {
        this.nextAsyncId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.I16) {
        this.asyncSequence = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSpanEvent.prototype.write = function(output) {
  output.writeStructBegin('TSpanEvent');
  if (this.spanId !== null && this.spanId !== undefined) {
    output.writeFieldBegin('spanId', Thrift.Type.I64, 7);
    output.writeI64(this.spanId);
    output.writeFieldEnd();
  }
  if (this.sequence !== null && this.sequence !== undefined) {
    output.writeFieldBegin('sequence', Thrift.Type.I16, 8);
    output.writeI16(this.sequence);
    output.writeFieldEnd();
  }
  if (this.startElapsed !== null && this.startElapsed !== undefined) {
    output.writeFieldBegin('startElapsed', Thrift.Type.I32, 9);
    output.writeI32(this.startElapsed);
    output.writeFieldEnd();
  }
  if (this.endElapsed !== null && this.endElapsed !== undefined) {
    output.writeFieldBegin('endElapsed', Thrift.Type.I32, 10);
    output.writeI32(this.endElapsed);
    output.writeFieldEnd();
  }
  if (this.rpc !== null && this.rpc !== undefined) {
    output.writeFieldBegin('rpc', Thrift.Type.STRING, 11);
    output.writeString(this.rpc);
    output.writeFieldEnd();
  }
  if (this.serviceType !== null && this.serviceType !== undefined) {
    output.writeFieldBegin('serviceType', Thrift.Type.I16, 12);
    output.writeI16(this.serviceType);
    output.writeFieldEnd();
  }
  if (this.endPoint !== null && this.endPoint !== undefined) {
    output.writeFieldBegin('endPoint', Thrift.Type.STRING, 13);
    output.writeString(this.endPoint);
    output.writeFieldEnd();
  }
  if (this.annotations !== null && this.annotations !== undefined) {
    output.writeFieldBegin('annotations', Thrift.Type.LIST, 14);
    output.writeListBegin(Thrift.Type.STRUCT, this.annotations.length);
    for (var iter7 in this.annotations)
    {
      if (this.annotations.hasOwnProperty(iter7))
      {
        iter7 = this.annotations[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.depth !== null && this.depth !== undefined) {
    output.writeFieldBegin('depth', Thrift.Type.I32, 15);
    output.writeI32(this.depth);
    output.writeFieldEnd();
  }
  if (this.nextSpanId !== null && this.nextSpanId !== undefined) {
    output.writeFieldBegin('nextSpanId', Thrift.Type.I64, 16);
    output.writeI64(this.nextSpanId);
    output.writeFieldEnd();
  }
  if (this.destinationId !== null && this.destinationId !== undefined) {
    output.writeFieldBegin('destinationId', Thrift.Type.STRING, 20);
    output.writeString(this.destinationId);
    output.writeFieldEnd();
  }
  if (this.apiId !== null && this.apiId !== undefined) {
    output.writeFieldBegin('apiId', Thrift.Type.I32, 25);
    output.writeI32(this.apiId);
    output.writeFieldEnd();
  }
  if (this.exceptionInfo !== null && this.exceptionInfo !== undefined) {
    output.writeFieldBegin('exceptionInfo', Thrift.Type.STRUCT, 26);
    this.exceptionInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.asyncId !== null && this.asyncId !== undefined) {
    output.writeFieldBegin('asyncId', Thrift.Type.I32, 30);
    output.writeI32(this.asyncId);
    output.writeFieldEnd();
  }
  if (this.nextAsyncId !== null && this.nextAsyncId !== undefined) {
    output.writeFieldBegin('nextAsyncId', Thrift.Type.I32, 31);
    output.writeI32(this.nextAsyncId);
    output.writeFieldEnd();
  }
  if (this.asyncSequence !== null && this.asyncSequence !== undefined) {
    output.writeFieldBegin('asyncSequence', Thrift.Type.I16, 32);
    output.writeI16(this.asyncSequence);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TSpan = function(args) {
  this.agentId = null;
  this.applicationName = null;
  this.agentStartTime = null;
  this.transactionId = null;
  this.spanId = null;
  this.parentSpanId = -1;
  this.startTime = null;
  this.elapsed = 0;
  this.rpc = null;
  this.serviceType = null;
  this.endPoint = null;
  this.remoteAddr = null;
  this.annotations = null;
  this.flag = 0;
  this.err = null;
  this.spanEventList = null;
  this.parentApplicationName = null;
  this.parentApplicationType = null;
  this.acceptorHost = null;
  this.apiId = null;
  this.exceptionInfo = null;
  this.applicationServiceType = null;
  this.loggingTransactionInfo = null;
  this.version = 1;
  if (args) {
    if (args.agentId !== undefined && args.agentId !== null) {
      this.agentId = args.agentId;
    }
    if (args.applicationName !== undefined && args.applicationName !== null) {
      this.applicationName = args.applicationName;
    }
    if (args.agentStartTime !== undefined && args.agentStartTime !== null) {
      this.agentStartTime = args.agentStartTime;
    }
    if (args.transactionId !== undefined && args.transactionId !== null) {
      this.transactionId = args.transactionId;
    }
    if (args.spanId !== undefined && args.spanId !== null) {
      this.spanId = args.spanId;
    }
    if (args.parentSpanId !== undefined && args.parentSpanId !== null) {
      this.parentSpanId = args.parentSpanId;
    }
    if (args.startTime !== undefined && args.startTime !== null) {
      this.startTime = args.startTime;
    }
    if (args.elapsed !== undefined && args.elapsed !== null) {
      this.elapsed = args.elapsed;
    }
    if (args.rpc !== undefined && args.rpc !== null) {
      this.rpc = args.rpc;
    }
    if (args.serviceType !== undefined && args.serviceType !== null) {
      this.serviceType = args.serviceType;
    }
    if (args.endPoint !== undefined && args.endPoint !== null) {
      this.endPoint = args.endPoint;
    }
    if (args.remoteAddr !== undefined && args.remoteAddr !== null) {
      this.remoteAddr = args.remoteAddr;
    }
    if (args.annotations !== undefined && args.annotations !== null) {
      this.annotations = Thrift.copyList(args.annotations, [TAnnotation]);
    }
    if (args.flag !== undefined && args.flag !== null) {
      this.flag = args.flag;
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
    if (args.spanEventList !== undefined && args.spanEventList !== null) {
      this.spanEventList = Thrift.copyList(args.spanEventList, [TSpanEvent]);
    }
    if (args.parentApplicationName !== undefined && args.parentApplicationName !== null) {
      this.parentApplicationName = args.parentApplicationName;
    }
    if (args.parentApplicationType !== undefined && args.parentApplicationType !== null) {
      this.parentApplicationType = args.parentApplicationType;
    }
    if (args.acceptorHost !== undefined && args.acceptorHost !== null) {
      this.acceptorHost = args.acceptorHost;
    }
    if (args.apiId !== undefined && args.apiId !== null) {
      this.apiId = args.apiId;
    }
    if (args.exceptionInfo !== undefined && args.exceptionInfo !== null) {
      this.exceptionInfo = new TIntStringValue(args.exceptionInfo);
    }
    if (args.applicationServiceType !== undefined && args.applicationServiceType !== null) {
      this.applicationServiceType = args.applicationServiceType;
    }
    if (args.loggingTransactionInfo !== undefined && args.loggingTransactionInfo !== null) {
      this.loggingTransactionInfo = args.loggingTransactionInfo;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
  }
};
TSpan.prototype = {};
TSpan.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.agentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.applicationName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.agentStartTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.transactionId = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.spanId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.parentSpanId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.startTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.elapsed = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.rpc = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I16) {
        this.serviceType = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.endPoint = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.remoteAddr = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.annotations = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new TAnnotation();
          elem14.read(input);
          this.annotations.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I16) {
        this.flag = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I32) {
        this.err = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.LIST) {
        var _size15 = 0;
        var _rtmp319;
        this.spanEventList = [];
        var _etype18 = 0;
        _rtmp319 = input.readListBegin();
        _etype18 = _rtmp319.etype;
        _size15 = _rtmp319.size;
        for (var _i20 = 0; _i20 < _size15; ++_i20)
        {
          var elem21 = null;
          elem21 = new TSpanEvent();
          elem21.read(input);
          this.spanEventList.push(elem21);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRING) {
        this.parentApplicationName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I16) {
        this.parentApplicationType = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.acceptorHost = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.I32) {
        this.apiId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.STRUCT) {
        this.exceptionInfo = new TIntStringValue();
        this.exceptionInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.I16) {
        this.applicationServiceType = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.BYTE) {
        this.loggingTransactionInfo = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.BYTE) {
        this.version = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSpan.prototype.write = function(output) {
  output.writeStructBegin('TSpan');
  if (this.agentId !== null && this.agentId !== undefined) {
    output.writeFieldBegin('agentId', Thrift.Type.STRING, 1);
    output.writeString(this.agentId);
    output.writeFieldEnd();
  }
  if (this.applicationName !== null && this.applicationName !== undefined) {
    output.writeFieldBegin('applicationName', Thrift.Type.STRING, 2);
    output.writeString(this.applicationName);
    output.writeFieldEnd();
  }
  if (this.agentStartTime !== null && this.agentStartTime !== undefined) {
    output.writeFieldBegin('agentStartTime', Thrift.Type.I64, 3);
    output.writeI64(this.agentStartTime);
    output.writeFieldEnd();
  }
  if (this.transactionId !== null && this.transactionId !== undefined) {
    output.writeFieldBegin('transactionId', Thrift.Type.STRING, 4);
    output.writeBinary(this.transactionId);
    output.writeFieldEnd();
  }
  if (this.spanId !== null && this.spanId !== undefined) {
    output.writeFieldBegin('spanId', Thrift.Type.I64, 7);
    output.writeI64(this.spanId);
    output.writeFieldEnd();
  }
  if (this.parentSpanId !== null && this.parentSpanId !== undefined) {
    output.writeFieldBegin('parentSpanId', Thrift.Type.I64, 8);
    output.writeI64(this.parentSpanId);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.I64, 9);
    output.writeI64(this.startTime);
    output.writeFieldEnd();
  }
  if (this.elapsed !== null && this.elapsed !== undefined) {
    output.writeFieldBegin('elapsed', Thrift.Type.I32, 10);
    output.writeI32(this.elapsed);
    output.writeFieldEnd();
  }
  if (this.rpc !== null && this.rpc !== undefined) {
    output.writeFieldBegin('rpc', Thrift.Type.STRING, 11);
    output.writeString(this.rpc);
    output.writeFieldEnd();
  }
  if (this.serviceType !== null && this.serviceType !== undefined) {
    output.writeFieldBegin('serviceType', Thrift.Type.I16, 12);
    output.writeI16(this.serviceType);
    output.writeFieldEnd();
  }
  if (this.endPoint !== null && this.endPoint !== undefined) {
    output.writeFieldBegin('endPoint', Thrift.Type.STRING, 13);
    output.writeString(this.endPoint);
    output.writeFieldEnd();
  }
  if (this.remoteAddr !== null && this.remoteAddr !== undefined) {
    output.writeFieldBegin('remoteAddr', Thrift.Type.STRING, 14);
    output.writeString(this.remoteAddr);
    output.writeFieldEnd();
  }
  if (this.annotations !== null && this.annotations !== undefined) {
    output.writeFieldBegin('annotations', Thrift.Type.LIST, 15);
    output.writeListBegin(Thrift.Type.STRUCT, this.annotations.length);
    for (var iter22 in this.annotations)
    {
      if (this.annotations.hasOwnProperty(iter22))
      {
        iter22 = this.annotations[iter22];
        iter22.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.flag !== null && this.flag !== undefined) {
    output.writeFieldBegin('flag', Thrift.Type.I16, 16);
    output.writeI16(this.flag);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.I32, 17);
    output.writeI32(this.err);
    output.writeFieldEnd();
  }
  if (this.spanEventList !== null && this.spanEventList !== undefined) {
    output.writeFieldBegin('spanEventList', Thrift.Type.LIST, 18);
    output.writeListBegin(Thrift.Type.STRUCT, this.spanEventList.length);
    for (var iter23 in this.spanEventList)
    {
      if (this.spanEventList.hasOwnProperty(iter23))
      {
        iter23 = this.spanEventList[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.parentApplicationName !== null && this.parentApplicationName !== undefined) {
    output.writeFieldBegin('parentApplicationName', Thrift.Type.STRING, 19);
    output.writeString(this.parentApplicationName);
    output.writeFieldEnd();
  }
  if (this.parentApplicationType !== null && this.parentApplicationType !== undefined) {
    output.writeFieldBegin('parentApplicationType', Thrift.Type.I16, 20);
    output.writeI16(this.parentApplicationType);
    output.writeFieldEnd();
  }
  if (this.acceptorHost !== null && this.acceptorHost !== undefined) {
    output.writeFieldBegin('acceptorHost', Thrift.Type.STRING, 21);
    output.writeString(this.acceptorHost);
    output.writeFieldEnd();
  }
  if (this.apiId !== null && this.apiId !== undefined) {
    output.writeFieldBegin('apiId', Thrift.Type.I32, 25);
    output.writeI32(this.apiId);
    output.writeFieldEnd();
  }
  if (this.exceptionInfo !== null && this.exceptionInfo !== undefined) {
    output.writeFieldBegin('exceptionInfo', Thrift.Type.STRUCT, 26);
    this.exceptionInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.applicationServiceType !== null && this.applicationServiceType !== undefined) {
    output.writeFieldBegin('applicationServiceType', Thrift.Type.I16, 30);
    output.writeI16(this.applicationServiceType);
    output.writeFieldEnd();
  }
  if (this.loggingTransactionInfo !== null && this.loggingTransactionInfo !== undefined) {
    output.writeFieldBegin('loggingTransactionInfo', Thrift.Type.BYTE, 31);
    output.writeByte(this.loggingTransactionInfo);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.BYTE, 32);
    output.writeByte(this.version);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TSpanChunk = function(args) {
  this.agentId = null;
  this.applicationName = null;
  this.agentStartTime = null;
  this.serviceType = null;
  this.transactionId = null;
  this.spanId = null;
  this.endPoint = null;
  this.spanEventList = null;
  this.applicationServiceType = null;
  this.keyTime = null;
  this.version = 1;
  if (args) {
    if (args.agentId !== undefined && args.agentId !== null) {
      this.agentId = args.agentId;
    }
    if (args.applicationName !== undefined && args.applicationName !== null) {
      this.applicationName = args.applicationName;
    }
    if (args.agentStartTime !== undefined && args.agentStartTime !== null) {
      this.agentStartTime = args.agentStartTime;
    }
    if (args.serviceType !== undefined && args.serviceType !== null) {
      this.serviceType = args.serviceType;
    }
    if (args.transactionId !== undefined && args.transactionId !== null) {
      this.transactionId = args.transactionId;
    }
    if (args.spanId !== undefined && args.spanId !== null) {
      this.spanId = args.spanId;
    }
    if (args.endPoint !== undefined && args.endPoint !== null) {
      this.endPoint = args.endPoint;
    }
    if (args.spanEventList !== undefined && args.spanEventList !== null) {
      this.spanEventList = Thrift.copyList(args.spanEventList, [TSpanEvent]);
    }
    if (args.applicationServiceType !== undefined && args.applicationServiceType !== null) {
      this.applicationServiceType = args.applicationServiceType;
    }
    if (args.keyTime !== undefined && args.keyTime !== null) {
      this.keyTime = args.keyTime;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
  }
};
TSpanChunk.prototype = {};
TSpanChunk.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.agentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.applicationName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.agentStartTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I16) {
        this.serviceType = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.transactionId = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.spanId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.endPoint = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.spanEventList = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new TSpanEvent();
          elem30.read(input);
          this.spanEventList.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I16) {
        this.applicationServiceType = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.keyTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BYTE) {
        this.version = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSpanChunk.prototype.write = function(output) {
  output.writeStructBegin('TSpanChunk');
  if (this.agentId !== null && this.agentId !== undefined) {
    output.writeFieldBegin('agentId', Thrift.Type.STRING, 1);
    output.writeString(this.agentId);
    output.writeFieldEnd();
  }
  if (this.applicationName !== null && this.applicationName !== undefined) {
    output.writeFieldBegin('applicationName', Thrift.Type.STRING, 2);
    output.writeString(this.applicationName);
    output.writeFieldEnd();
  }
  if (this.agentStartTime !== null && this.agentStartTime !== undefined) {
    output.writeFieldBegin('agentStartTime', Thrift.Type.I64, 3);
    output.writeI64(this.agentStartTime);
    output.writeFieldEnd();
  }
  if (this.serviceType !== null && this.serviceType !== undefined) {
    output.writeFieldBegin('serviceType', Thrift.Type.I16, 4);
    output.writeI16(this.serviceType);
    output.writeFieldEnd();
  }
  if (this.transactionId !== null && this.transactionId !== undefined) {
    output.writeFieldBegin('transactionId', Thrift.Type.STRING, 5);
    output.writeBinary(this.transactionId);
    output.writeFieldEnd();
  }
  if (this.spanId !== null && this.spanId !== undefined) {
    output.writeFieldBegin('spanId', Thrift.Type.I64, 8);
    output.writeI64(this.spanId);
    output.writeFieldEnd();
  }
  if (this.endPoint !== null && this.endPoint !== undefined) {
    output.writeFieldBegin('endPoint', Thrift.Type.STRING, 9);
    output.writeString(this.endPoint);
    output.writeFieldEnd();
  }
  if (this.spanEventList !== null && this.spanEventList !== undefined) {
    output.writeFieldBegin('spanEventList', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRUCT, this.spanEventList.length);
    for (var iter31 in this.spanEventList)
    {
      if (this.spanEventList.hasOwnProperty(iter31))
      {
        iter31 = this.spanEventList[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.applicationServiceType !== null && this.applicationServiceType !== undefined) {
    output.writeFieldBegin('applicationServiceType', Thrift.Type.I16, 11);
    output.writeI16(this.applicationServiceType);
    output.writeFieldEnd();
  }
  if (this.keyTime !== null && this.keyTime !== undefined) {
    output.writeFieldBegin('keyTime', Thrift.Type.I64, 12);
    output.writeI64(this.keyTime);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.BYTE, 13);
    output.writeByte(this.version);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TStringMetaData = function(args) {
  this.agentId = null;
  this.agentStartTime = null;
  this.stringId = null;
  this.stringValue = null;
  if (args) {
    if (args.agentId !== undefined && args.agentId !== null) {
      this.agentId = args.agentId;
    }
    if (args.agentStartTime !== undefined && args.agentStartTime !== null) {
      this.agentStartTime = args.agentStartTime;
    }
    if (args.stringId !== undefined && args.stringId !== null) {
      this.stringId = args.stringId;
    }
    if (args.stringValue !== undefined && args.stringValue !== null) {
      this.stringValue = args.stringValue;
    }
  }
};
TStringMetaData.prototype = {};
TStringMetaData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.agentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.agentStartTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.stringId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.stringValue = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TStringMetaData.prototype.write = function(output) {
  output.writeStructBegin('TStringMetaData');
  if (this.agentId !== null && this.agentId !== undefined) {
    output.writeFieldBegin('agentId', Thrift.Type.STRING, 1);
    output.writeString(this.agentId);
    output.writeFieldEnd();
  }
  if (this.agentStartTime !== null && this.agentStartTime !== undefined) {
    output.writeFieldBegin('agentStartTime', Thrift.Type.I64, 2);
    output.writeI64(this.agentStartTime);
    output.writeFieldEnd();
  }
  if (this.stringId !== null && this.stringId !== undefined) {
    output.writeFieldBegin('stringId', Thrift.Type.I32, 4);
    output.writeI32(this.stringId);
    output.writeFieldEnd();
  }
  if (this.stringValue !== null && this.stringValue !== undefined) {
    output.writeFieldBegin('stringValue', Thrift.Type.STRING, 5);
    output.writeString(this.stringValue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TSqlMetaData = function(args) {
  this.agentId = null;
  this.agentStartTime = null;
  this.sqlId = null;
  this.sql = null;
  if (args) {
    if (args.agentId !== undefined && args.agentId !== null) {
      this.agentId = args.agentId;
    }
    if (args.agentStartTime !== undefined && args.agentStartTime !== null) {
      this.agentStartTime = args.agentStartTime;
    }
    if (args.sqlId !== undefined && args.sqlId !== null) {
      this.sqlId = args.sqlId;
    }
    if (args.sql !== undefined && args.sql !== null) {
      this.sql = args.sql;
    }
  }
};
TSqlMetaData.prototype = {};
TSqlMetaData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.agentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.agentStartTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.sqlId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.sql = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSqlMetaData.prototype.write = function(output) {
  output.writeStructBegin('TSqlMetaData');
  if (this.agentId !== null && this.agentId !== undefined) {
    output.writeFieldBegin('agentId', Thrift.Type.STRING, 1);
    output.writeString(this.agentId);
    output.writeFieldEnd();
  }
  if (this.agentStartTime !== null && this.agentStartTime !== undefined) {
    output.writeFieldBegin('agentStartTime', Thrift.Type.I64, 2);
    output.writeI64(this.agentStartTime);
    output.writeFieldEnd();
  }
  if (this.sqlId !== null && this.sqlId !== undefined) {
    output.writeFieldBegin('sqlId', Thrift.Type.I32, 4);
    output.writeI32(this.sqlId);
    output.writeFieldEnd();
  }
  if (this.sql !== null && this.sql !== undefined) {
    output.writeFieldBegin('sql', Thrift.Type.STRING, 5);
    output.writeString(this.sql);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TApiMetaData = function(args) {
  this.agentId = null;
  this.agentStartTime = null;
  this.apiId = null;
  this.apiInfo = null;
  this.line = null;
  this.type = null;
  if (args) {
    if (args.agentId !== undefined && args.agentId !== null) {
      this.agentId = args.agentId;
    }
    if (args.agentStartTime !== undefined && args.agentStartTime !== null) {
      this.agentStartTime = args.agentStartTime;
    }
    if (args.apiId !== undefined && args.apiId !== null) {
      this.apiId = args.apiId;
    }
    if (args.apiInfo !== undefined && args.apiInfo !== null) {
      this.apiInfo = args.apiInfo;
    }
    if (args.line !== undefined && args.line !== null) {
      this.line = args.line;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
  }
};
TApiMetaData.prototype = {};
TApiMetaData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.agentId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.agentStartTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.apiId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.apiInfo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.line = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TApiMetaData.prototype.write = function(output) {
  output.writeStructBegin('TApiMetaData');
  if (this.agentId !== null && this.agentId !== undefined) {
    output.writeFieldBegin('agentId', Thrift.Type.STRING, 1);
    output.writeString(this.agentId);
    output.writeFieldEnd();
  }
  if (this.agentStartTime !== null && this.agentStartTime !== undefined) {
    output.writeFieldBegin('agentStartTime', Thrift.Type.I64, 2);
    output.writeI64(this.agentStartTime);
    output.writeFieldEnd();
  }
  if (this.apiId !== null && this.apiId !== undefined) {
    output.writeFieldBegin('apiId', Thrift.Type.I32, 4);
    output.writeI32(this.apiId);
    output.writeFieldEnd();
  }
  if (this.apiInfo !== null && this.apiInfo !== undefined) {
    output.writeFieldBegin('apiInfo', Thrift.Type.STRING, 5);
    output.writeString(this.apiInfo);
    output.writeFieldEnd();
  }
  if (this.line !== null && this.line !== undefined) {
    output.writeFieldBegin('line', Thrift.Type.I32, 6);
    output.writeI32(this.line);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 10);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TResult = function(args) {
  this.success = null;
  this.message = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
TResult.prototype = {};
TResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TResult.prototype.write = function(output) {
  output.writeStructBegin('TResult');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TRACE_V1 = 0;
TRACE_V2 = 1;
